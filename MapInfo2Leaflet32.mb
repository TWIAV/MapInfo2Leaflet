'************************************************************************************
'**  MapInfo2Leaflet32 (for the 'classic' 32 bit version MapInfo Professional 9.5 or higher)
'**  
'**  
'**  Author:	Egge-Jan Pollé
'**  Date:		2 October 2014
'************************************************************************************
Include "MapInfo2Leaflet32.def"

'************************************************************************************
Sub Main
'************************************************************************************

OnError Goto HandleError

	Create Menu AppNameMenu As
		AppNameMenu
		HelpMsg "Export a MapInfo Table to a Web Page using Leaflet (this version: point data only)."
		Calling ExportDialog,
		"(-",
		"&About " + AppName
		HelpMsg "Information about the application " + AppName
		Calling About

	'Remove the Window menu and Help menu
	Alter Menu Bar Remove ID 6, ID 7
	'Add the custom menu, then the Window & Help menus
	Alter Menu Bar Add AppNameMenu, ID 6, ID 7

	Create ButtonPad AppName As
		PushButton
			Icon 8001 File "MIPro2LFLTIcons.dll"
			HelpMsg "Export a MapInfo Table to a Web Page using Leaflet (this version: point data only).\n" + AppName
			Calling ExportDialog
		Show
		Fixed
		
Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub Main

'************************************************************************************
Sub ExportDialog
'************************************************************************************

OnError Goto HandleError

	'Set CoordSys to WGS84
	Set CoordSys Earth Projection 1, 104

	If iPointStyleSetting = 0 Then
		iPointStyleSetting = 1
	End If

	Call GetPointTables

	Dialog
		Title "Export a MapInfo Table to a Web Page using Leaflet (this version: point data only)"
		Control StaticText Title "Select &Table to Export:" Position 3dW, 1dH
		Control PopUpMenu Title From Variable sTableList Value 1 Position 3dW, 2.5dH Width 45dW ID ExpDlgPUMTableID Calling EnableLayerSelection
	
		Control Button Title "Set &Layer Settings" Position 50dW, 2.5dH ID ExpDlgBtnLaySetID Disable Calling LayerSettingsDialog

		Control StaticText Title "Set Title for &Web Page:" Position 3dW, 4.5dH Disable ID ExpDlgSTTitleWebPageID
		Control EditText Position 3dW, 6dH Width 75dW Disable ID ExpDlgETTitleWebPageID

		Control StaticText Title "Set &html file:" Position 3dW, 8dH Disable ID ExpDlgSTHTMLFileID
		Control Button Title "..." Width 4dW Position 3dW, 9.25dH Disable ID ExpDlgBtnSetHTMLFilePathID Calling SetHTMLFilePath
		Control EditText Position 8dW, 9.5dH Width 70dW Disable ID ExpDlgETHTMLFilePathID

		Control Button Title "Set &Style Settings" Position 50dW, 11.5dH Disable ID ExpDlgBtnStyleSetID Calling StyleSettingsDialog

		Control StaticText Title "PROCEDURE:" Position 3dW, 11.5dH
		Control StaticText Title "Step 1: Select Table to Export" Position 3dW, 13dH
		Control StaticText Title "Step 2: Set Layer Settings" Position 3dW, 14.5dH Disable ID ExpDlgSTStep2ID
		Control StaticText Title "Step 3: Set Title for Web Page" Position 3dW, 16dH Disable ID ExpDlgSTStep3ID
		Control StaticText Title "Step 4: Set html file" Position 3dW, 17.5dH Disable ID ExpDlgSTStep4ID
		Control StaticText Title "Step 5: Set Style Settings" Position 3dW, 19dH Disable ID ExpDlgSTStep5ID
		Control StaticText Title "Step 6: Click OK to Export" Position 3dW, 20.5dH Disable ID ExpDlgSTStep6ID
	
		Control OKButton Title "&OK" Disable ID ExpDlgOKBtnID Calling ExpDlgOKBtnHandler
		Control CancelButton Title "&Cancel" ID ExpDlgCancelBtnID
		Control Button Title "&Help" Calling AddIn_Help
		
		If CommandInfo(CMD_INFO_DLG_OK) Then
			Call CreateHTML
		Else 'User canceled
			Exit Sub
		End If

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ExportDialog

'************************************************************************************
Sub CreateHTML
'************************************************************************************

OnError Goto HandleError

Dim i, j, iNumRows As Integer
Dim fX, fY As Float
Dim aColj, aObjCol, aTooltipCol As Alias
Dim sCenter, sString, sPopUpString, sColumnText, sValue, sCurDate, sStyleValue, sIconValue, sTooltipString, sMapString As String

	sCurDate = CurDate()
	sCurDate = RegionalLongDate(sCurDate)

'---------------------------------------
Open File sGeoJSONFilePathTmp For Output Access Write As #1 CharSet SystemInfo(SYS_INFO_CHARSET)'"WindowsLatin1"
Open File sHTMLFilePathTmp For Output Access Write As #2 CharSet SystemInfo(SYS_INFO_CHARSET)'"WindowsLatin1"
OnError Goto HandleErrorDuringFileCreation

'--------------------------------------------------------------------------
' SOME USEFUL NOTES ON INCLUDING HTML CONTENT IN A (GEO)JSON DATA STRUCTURE
'--------------------------------------------------------------------------
' The JSON spec does not have many restrictions. JSON data is either a string, a number, a boolean, an object, an array, or null. As long as your data is formatted as one of these types, it should be valid. However, if your data contains HTML, there are certain things that you need to do to keep the browser happy when using your JSON data within Javascript.
'
' 1. Escape quotation marks used around HTML attributes like so <img src=\"someimage.png\"/>
' 2. Escape the forward slash in HTML end tags. <div>Hello World!<\/div>. This is an ancient artifact of an old HTML spec that didn’t want html parsers to get confused when putting strings in a <SCRIPT> tag. For some reason, today’s browsers still like it.
' 3. This one was totally bizarre. You should include a space between the tag name and the slash on self closing tags. I have no idea why this is, but on MOST modern browsers, if you try using javascript to append a <li> tag as a child of an unordered list that is formatted like so: <ul/>, it won’t work. It gets added to the DOM after the ul tag. But, if the code looks like this: <ul /> (notice the space after the /), everything works fine. Very strange indeed.
' 4. Be sure to encode any quotation marks that might be included in (bad) HTML content. This is the only thing that would really break the JSON by accidentally terminating the string early. Any " characters should be encoded as &quot; if it is meant to be included as HTML content.
'
' Source: http://www.thorntech.com/2012/07/4-things-you-must-do-when-putting-html-in-json/
'--------------------------------------------------------------------------
' Populate the GeoJSON/Javascript file first with a FeatureCollection
'--------------------------------------------------------------------------
Print #1, "//Point data exported from MapInfo Professional: " + sTable2Export + ".TAB"
Print #1, "//Last modified: " + sCurDate
Print #1, "var " + sFeatureCollection + " = {"
Print #1, Chr$(9) + Chr$(34) + "type" + Chr$(34) + ": " + Chr$(34) + "FeatureCollection" + Chr$(34) + ","
Print #1, Chr$(9) + Chr$(34) + "features" + Chr$(34) + ": ["

iNumRows = TableInfo(sTable2Export, TAB_INFO_NROWS)

For i = 1 to iNumRows
	Fetch Rec i From sTable2Export
	sPopUpString = ""
	sTooltipString = ""
	aTooltipCol = sTable2Export + "." + sTooltipCol
	sTooltipString = aTooltipCol
	For j = 1 to UBound(Columns2Export)
		sColumnText = ""
		aColj = sTable2Export + "." + Columns2Export(j).sColName
		sValue = aColj
		If sValue = "" Then
			Goto NextLabel
		End If
		If ColumnInfo(sTable2Export, Columns2Export(j).sColName, COL_INFO_TYPE) = COL_TYPE_CHAR Then
			'Any single quote/apostrophe (') in text values should be replaced with the code &#39;
			sValue = ReplaceSubStringWith(sValue, Chr$(39), "&#39")
			'Any double quote (") in text values should be replaced with the code &quot;
			sValue = ReplaceSubStringWith(sValue, Chr$(34), "&quot;")
		End If
		If lAddColumnNames Then
			sColumnText = ReplaceSubStringWith(Columns2Export(j).sColName, Chr$(95), Chr$(32)) + ": "
		End If
		If Columns2Export(j).lHyperlink And LooksLikeURL(sValue) Then
			sColumnText = sColumnText + "<a href=" + Chr$(92) + Chr$(34) + sValue + Chr$(92) + Chr$(34) + ">"
			aColj = sTable2Export + "." + Columns2Export(j).sAlias
			sValue = aColj
			If ColumnInfo(sTable2Export, Columns2Export(j).sAlias, COL_INFO_TYPE) = COL_TYPE_CHAR Then
				'Any single quote/apostrophe (') in text values should be replaced with the code &#39;
				sValue = ReplaceSubStringWith(sValue, Chr$(39), "&#39") 
				'Any double quote (") in text values should be replaced with the code &quot;
				sValue = ReplaceSubStringWith(sValue, Chr$(34), "&quot;")
			End If
			sColumnText = sColumnText + sValue + "<" + Chr$(92) + "/a>"
		Else
			sColumnText = sColumnText + sValue
		End If
		If lFirstColumnBold And j = 1 Then
			sColumnText = "<b>" + sColumnText + "<" + Chr$(92) + "/b>"
		End If
		If sPopUpString = "" Then
			sPopUpString = sColumnText
		Else
			sPopUpString = sPopUpString + "<br>" + sColumnText
		End If
	NextLabel:
	Next
	aObjCol = sTable2Export + ".obj"
	fX = CentroidX(aObjCol)
	fY = CentroidY(aObjCol)

	Print #1, Chr$(9) + Chr$(9) + "{"
	Print #1, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "type" + Chr$(34) + ": " + Chr$(34) + "Feature" + Chr$(34) + ","
	Print #1, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "properties" + Chr$(34) + ": {"
	Print #1, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "tooltipContent" + Chr$(34) + ": " + Chr$(34) + sTooltipString + Chr$(34) + ","
	Print #1, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "popupContent" + Chr$(34) + ": " + Chr$(34) + sPopUpString + Chr$(34)
	Print #1, Chr$(9) + Chr$(9) + Chr$(9) + "},"
	Print #1, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "geometry" + Chr$(34) + ": {"
	Print #1, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "type" + Chr$(34) + ": " + Chr$(34) + "Point" + Chr$(34) + ","
	Print #1, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "coordinates" + Chr$(34) + ": [" + fX + ", " + fY + "]" 'First Longitude (X), then Latitude (Y)
	Print #1, Chr$(9) + Chr$(9) + Chr$(9) + "}"
	If i < iNumRows Then
		Print #1, Chr$(9) + Chr$(9) + "},"
	Else
		Print #1, Chr$(9) + Chr$(9) + "}"
	End If
Next

Print #1, Chr$(9) + "]"
Print #1, "};"

'If the table is not present in a Map Window in MapInfo Professional during export
'the map will be centered on last object added from the table
sCenter = fY + ", " + fX

'--------------------------------------------------------------------------
' Create the html file
'--------------------------------------------------------------------------
Print #2, "<!DOCTYPE html>"
Print #2, "<html>"
Print #2, "<head>"
Print #2, Chr$(9) + "<title>" + sTitleWebsite + "</title>"
Print #2, Chr$(9) + "<meta http-equiv=" + Chr$(34) + "Content-Type" + Chr$(34) + " content=" + Chr$(34) + "text/html;charset=UTF-8" + Chr$(34) + ">"
Print #2, Chr$(9) + "<meta name=" + Chr$(34) + "viewport" + Chr$(34) + " content=" + Chr$(34) + "width=device-width, initial-scale=1.0" + Chr$(34) + ">"
Print #2, Chr$(9) + "<link rel=" + Chr$(34) + "stylesheet" + Chr$(34) + " href=" + Chr$(34) + "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.css" + Chr$(34) + " />"
Print #2, Chr$(9) + "<link rel=" + Chr$(34) + "stylesheet" + Chr$(34) + " href=" + Chr$(34) + "default.css" + Chr$(34) + " />"

If iPointStyleSetting = 2 Then
	Print #2, Chr$(9) + "<style>"
	Print #2, Chr$(9) + Chr$(9) + ".miMarker {"
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "background-color: rgba(0,128,0,.9);"
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "border: 3px solid #FF0000;"
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "border-radius: 50%;"
	Print #2, Chr$(9) + Chr$(9) + "}"	
	Print #2, Chr$(9) + "</style>"
End If

Print #2, "</head>"
Print #2, "<body>"
Print #2, Chr$(9) + "<header>"
Print #2, Chr$(9) + Chr$(9) + "<h1>" + sTitleWebsite + "</h1>"
Print #2, Chr$(9) + "</header>"
Print #2, Chr$(9) + "<div id=" + Chr$(34) + "main" + Chr$(34) + ">"
Print #2, Chr$(9) + Chr$(9) + "<div id=" + Chr$(34) + "map" + Chr$(34) + "></div>"
Print #2, Chr$(9) + Chr$(9) + "<br>"
Print #2, Chr$(9) + Chr$(9) + "<p>Point data exported from MapInfo Professional: " + sTable2Export + ".TAB</p>"
Print #2, Chr$(9) + Chr$(9) + "<p>Last modified: " + sCurDate + "</p>"
Print #2, Chr$(9) + "</div>"
Print #2, Chr$(9) + "<script src=" + Chr$(34) + PathToFileName$(sGeoJSONFilePath) + Chr$(34) + " type=" + Chr$(34) + "text/javascript" + Chr$(34) + "></script>"
Print #2, Chr$(9) + "<script src=" + Chr$(34) + "http://cdn.leafletjs.com/leaflet-0.7.3/leaflet.js" + Chr$(34) + "></script>"
Print #2, Chr$(9) + "<script>"
Print #2, sDatasetBounds
Print #2

If sFitBounds = "" Then
	sMapString = "setView([" + sCenter + "], 12)"
Else
	sMapString = sFitBounds
End If

sMapString = sMapString + ".setMaxBounds(bounds);"

Print #2, Chr$(9) + Chr$(9) + "var map = L.map('map')." + sMapString
Print #2
Print #2, Chr$(9) + Chr$(9) + "// Limit the minimum zoom level to the bounds of the dataset to prevent users from leaving this area on the map"
Print #2, Chr$(9) + Chr$(9) + "var mz = map.getBoundsZoom(bounds, false);"
Print #2
Print #2, Chr$(9) + Chr$(9) + "var osmAttrib='Map data " + Chr$(169) + " <a href=" + Chr$(34) + "http://openstreetmap.org" + Chr$(34) + ">OpenStreetMap</a> contributors',"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "osmUrl='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';"
Print #2
Print #2, Chr$(9) + Chr$(9) + "var osm = L.tileLayer(osmUrl, {attribution: osmAttrib, minZoom: mz}).addTo(map);"
Print #2
Print #2, Chr$(9) + Chr$(9) + "function onEachFeature(feature, layer) {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "if (feature.properties && feature.properties.popupContent) {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "layer.bindPopup(feature.properties.popupContent);"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "}"
Print #2, Chr$(9) + Chr$(9) + "}"
Print #2

Do Case iPointStyleSetting

	Case 1

		Print #2,  Chr$(9) + Chr$(9) + "var blueArrowIcon = L.icon({"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "iconUrl: 'blue-arrow.png',"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "iconSize: [32, 37],"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "iconAnchor: [16, 37],"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "popupAnchor: [0, -28]"
		Print #2,  Chr$(9) + Chr$(9) + "});"

		Save File ApplicationDirectory$() + "blue-arrow.png" As PathToDirectory$(sHTMLFilePath) + "blue-arrow.png"

		sIconValue = "blueArrowIcon"

	Case 2

		Print #2, Chr$(9) + Chr$(9) + "var miIcon = L.divIcon({className: 'miMarker'});"

		sIconValue = "miIcon"
	
End Case

sStyleValue = "L.marker(latlng, {icon: " + sIconValue + ", title: feature.properties.tooltipContent});"

Print #2
sLayerNameTech = sFeatureCollection + "Layer"
Print #2, Chr$(9) + Chr$(9) + "var " + sLayerNameTech + " = L.geoJson(" + sFeatureCollection + ", {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "pointToLayer: function (feature, latlng) {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "return " + sStyleValue
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "},"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "onEachFeature: onEachFeature"
Print #2, Chr$(9) + Chr$(9) + "}).addTo(map);"
Print #2
Print #2, Chr$(9) + Chr$(9) + "var baseLayers = {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "OpenStreetMap" + Chr$(34) + ": osm"
Print #2, Chr$(9) + Chr$(9) + "};"
Print #2
Print #2, Chr$(9) + Chr$(9) + "var overlays = {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + sLayerNamePub + Chr$(34) + ": " + sLayerNameTech 
Print #2, Chr$(9) + Chr$(9) + "};"
Print #2
Print #2, Chr$(9) + Chr$(9) + "L.control.layers(baseLayers, overlays).addTo(map);"
Print #2, Chr$(9) + "</script>"
Print #2, "</body>"
Print #2, "</html>"

Close File #1
Close File #2

OnError Goto HandleError

Save File ApplicationDirectory$() + "default.css" As PathToDirectory$(sHTMLFilePath) + "default.css"

' Convert the ANSI files to UTF-8
Call ConvertFileANSItoUTF8(sHTMLFilePathTmp, sHTMLFilePath)
If FileExists(sHTMLFilePathTmp) Then
	Kill sHTMLFilePathTmp 	
End If

Call ConvertFileANSItoUTF8(sGeoJSONFilePathTmp, sGeoJSONFilePath)
If FileExists(sGeoJSONFilePathTmp) Then
	Kill sGeoJSONFilePathTmp 	
End If

If AskAgain("Html file created: " + sHTMLFilePath + Chr$(10) + "Do you want to open it in a browser?", AppName) Then
	Call OpenFileOrDir(sHTMLFilePath)
End If

'-------------------------------------------
		
Exit Sub
'---------------------------
HandleError:
	Note Error$()
	Exit Sub

'---------------------------
HandleErrorDuringFileCreation:
	Close File #1
	Close File #2
	Note Error$()

End Sub CreateHTML

'*********************************************************************************************
Sub EnableLayerSelection
'*********************************************************************************************

OnError GoTo HandleError

Dim i As Integer
Dim fX1, fY1, fX2, fY2 As Float

	sFitBounds = ""
	sDatasetBounds = ""

	If ReadControlValue(ExpDlgPUMTableID) > 1 Then
		sTable2Export = sTableList(ReadControlValue(ExpDlgPUMTableID))
		If NoOfColumns(sTable2Export, sColumnsList) > 1 Then
			Alter Control ExpDlgBtnLaySetID Enable
			Alter Control ExpDlgSTStep2ID Enable
			sHTMLFilePath = PathToDirectory$(TableInfo(sTable2Export, TAB_INFO_TABFILE)) + sTable2Export + ".html"
			sHTMLFilePathTmp = PathToDirectory$(TableInfo(sTable2Export, TAB_INFO_TABFILE)) + sTable2Export + "_tmp.html"
			sGeoJSONFilePath = PathToDirectory$(TableInfo(sTable2Export, TAB_INFO_TABFILE)) + sTable2Export + ".js"
			sGeoJSONFilePathTmp = PathToDirectory$(TableInfo(sTable2Export, TAB_INFO_TABFILE)) + sTable2Export + "_tmp.js"
			Alter Control ExpDlgETHTMLFilePathID Value sHTMLFilePath
			sTitleWebsite = ReplaceSubStringWith(sTable2Export, Chr$(95), Chr$(32))
			Alter Control ExpDlgETTitleWebPageID Value sTitleWebsite
			sLayerNamePub = ReplaceSubStringWith(sTable2Export, Chr$(95), Chr$(32))  'Visible for the user in the Leaflet Layers Control
			sFeatureCollection = ReplaceSubStringWith(LCase$(sLayerNamePub), Chr$(32), Chr$(95)) 'Used as the GeoJSON var name

			'Take the minimum and maximum x- and y-coordinates of all objects in the table
			fX1 = TableInfo(sTable2Export, TAB_INFO_MINX)
			fY1 = TableInfo(sTable2Export, TAB_INFO_MINY)
			fX2 = TableInfo(sTable2Export, TAB_INFO_MAXX)
			fY2 = TableInfo(sTable2Export, TAB_INFO_MAXY)

			'Put an additional margin around all the objects in the table
			fX1 = fX1 - .15*(fX2-fX1)
			fY1 = fY1 - .15*(fY2-fY1)
			fX2 = fX2 + .15*(fX2-fX1)
			fY2 = fY2 + .15*(fY2-fY1)
			
			sDatasetBounds = Chr$(9) + Chr$(9) + "// These are the bounds of the " + sFeatureCollection + " dataset, plus a little margin" + Chr$(10)
			sDatasetBounds = sDatasetBounds + Chr$(9) + Chr$(9) + "var southWest = L.latLng(" + fY1 + ", " + fX1 + ")," + Chr$(10)
			sDatasetBounds = sDatasetBounds + Chr$(9) + Chr$(9) + Chr$(9) + "northEast = L.latLng(" + fY2 + ", " + fX2 + ")," + Chr$(10)
			sDatasetBounds = sDatasetBounds + Chr$(9) + Chr$(9) + Chr$(9) + "bounds = L.latLngBounds(southWest, northEast);"

			ReDim sColumnsListPopup(UBound(sColumnsList) - 1)
			For i = 2 To UBound(sColumnsList)
				sColumnsListPopup(i - 1) = sColumnsList(i)
			Next
			For i = 1 To NumWindows()
				If LayerIsInMap(WindowID(i), sTable2Export) Then
					'If the table is present in a Map Window in MapInfo Professional during export
					'the map in the web page will be fit to the bounds of this Map Window
					sFitBounds = "fitBounds([["
					sFitBounds = sFitBounds + MapperInfo(WindowID(i), MAPPER_INFO_MINY) + ", " 'South
					sFitBounds = sFitBounds + MapperInfo(WindowID(i), MAPPER_INFO_MINX) + "], [" 'West
					sFitBounds = sFitBounds + MapperInfo(WindowID(i), MAPPER_INFO_MAXY) + ", " 'North
					sFitBounds = sFitBounds + MapperInfo(WindowID(i), MAPPER_INFO_MAXX) + "]])" 'East
				End If
			Next
		End If
	Else
		sTable2Export = ""
		Alter Control ExpDlgBtnLaySetID Disable
		Alter Control ExpDlgSTStep2ID Disable
		Alter Control ExpDlgOKBtnID Disable
		sGeoJSONFilePathTmp = ""
		sGeoJSONFilePath = ""
		sHTMLFilePathTmp = ""
		sHTMLFilePath = ""
		Alter Control ExpDlgETHTMLFilePathID Value sHTMLFilePath Disable
		sTitleWebsite = ""
		Alter Control ExpDlgETTitleWebPageID Value sTitleWebsite Disable
		Alter Control ExpDlgBtnStyleSetID Disable
		Alter Control ExpDlgSTTitleWebPageID Disable
		Alter Control ExpDlgSTHTMLFileID Disable
		Alter Control ExpDlgBtnSetHTMLFilePathID Disable
		sLayerNamePub =  ""
		sFeatureCollection = ""
		ReDim sColumnsListPopup(0)
		Alter Control ExpDlgSTStep2ID Disable
		Alter Control ExpDlgSTStep3ID Disable
		Alter Control ExpDlgSTStep4ID Disable
		Alter Control ExpDlgSTStep5ID Disable
		Alter Control ExpDlgSTStep6ID Disable
		Alter Control ExpDlgOKBtnID Disable
	End If

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub EnableLayerSelection

'************************************************************************************
Sub ExpDlgOKBtnHandler
'************************************************************************************

OnError Goto HandleError

		sHTMLFilePath = ReadControlValue(ExpDlgETHTMLFilePathID)
		sHTMLFilePathTmp = Left$(sHTMLFilePath, Len(sHTMLFilePath) - 5) + "_tmp.html"
		sGeoJSONFilePath = Left$(sHTMLFilePath, Len(sHTMLFilePath) - 5) + ".js"
		sGeoJSONFilePathTmp = Left$(sHTMLFilePath, Len(sHTMLFilePath) - 5) + "_tmp.js"
		sTitleWebsite = ReadControlValue(ExpDlgETTitleWebPageID)

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub ExpDlgOKBtnHandler

'************************************************************************************
Sub LayerSettingsDialog
'************************************************************************************

OnError Goto HandleError

	ReDim sColumnsListNonPopup(0)

	Dialog
		Title "Layer Settings"
		Calling CheckForHyperlinks
		Control StaticText Title "Layer&Group Name*:" Position 2dW, 1dH
		Control EditText Value sLayerNamePub Position 19dW, 1dH Width 35dW ID LSDlgETLNameID
		Control StaticText Title "*As visible in the Leaflet Layers Control" Position 2dW, 2.5dH
		Control StaticText Title "Columns Not to be Added to Pop&up:" Position 2dW, 4.5dH
		Control ListBox Position 2dW, 6.5dH Width 36dW Height 19.5dH ID LSDlgLBLayersNotAddedID Calling NonAddedColumnsHandler
		Control CheckBox Title "Add Column &Names" Value lAddColumnNames Position 56.5dW, 1.5dH ID LSDlgCBAddColNmID
		Control CheckBox Title "First Column &Bold" Value lFirstColumnBold Position 56.5dW, 3dH ID LSDlgCBCol1BoldID
		Control StaticText Title "Columns to be Added to &Popup:" Position 56.5dW, 4.5dH
		Control ListBox Title From Variable sColumnsListPopup Position 56.5dW, 6.5dH Width 36dW Height 19.5dH ID LSDlgLBLayersAddedID Calling AddedColumnsHandler
		Control Button Title "&Add >" Position 38.75dW, 6.5dH Width 16.5dW Height 3dH Disable ID LSDlgBtnAddID Calling ModifyColumnsListPopupAdd
		Control Button Title "A&dd All >>" Position 38.75dW, 10dH Width 16.5dW Height 3dH Disable ID LSDlgBtnAddAllID Calling ModifyColumnsListPopupAddAll
		Control Button Title "< &Remove" Position 38.75dW, 19.5dH Width 16.5dW Height 3dH Disable ID LSDlgBtnRemID Calling ModifyColumnsListPopupRemove
		Control Button Title "<< R&emove All" Position 38.75dW, 23dH Width 16.5dW Height 3dH ID LSDlgBtnRemAllID Calling ModifyColumnsListPopupRemoveAll
		Control GroupBox Title "Hyperlink:" Position 2dW, 27dH Width 58dW Height 6dH Disable ID LSDlgGBHLnkID
		Control StaticText Title "Column:" Position 3dW, 28.5dH Disable ID LSDlgSTHLColID
		Control EditText Position 10dW, 28.5dH Width 32dW Disable ID LSDlgETHLColID
		Control StaticText Title "A&lias:" Position 3dW, 30.5dH Disable ID LSDlgSTAliasID
		Control PopupMenu Position 10dW, 30.5dH Width 32dW Disable ID LSDlgPUMAliasID
		Control Button Title "Re&move Hyperlink" Position 42.5dW, 28.5dH Width 16.5dW Height 3.5dH Disable ID LSDlgBtnRemHLID Calling RemoveHyperLink
		
		Control StaticText Title "&Tooltip:" Position 3dW, 33.5dH ID LSDlgSTTTipID
		Control PopupMenu Title From Variable sColumnsList Value 2 Position 10dW, 33.5dH Width 32dW ID LSDlgPUMTTipID

		Control OKButton Title "&OK" ID LSDlgOKBtnID Calling LSDlgOKBtnHandler
		Control CancelButton Title "&Cancel"
		Control Button Title "&Help" Calling AddIn_Help

		If CommandInfo(CMD_INFO_DLG_OK) Then
			Alter Control ExpDlgETHTMLFilePathID Enable
			Alter Control ExpDlgETTitleWebPageID Enable
			Alter Control ExpDlgSTTitleWebPageID Enable
			Alter Control ExpDlgSTHTMLFileID Enable
			Alter Control ExpDlgBtnSetHTMLFilePathID Enable
			Alter Control ExpDlgBtnStyleSetID Enable
			Alter Control ExpDlgSTStep3ID Enable
			Alter Control ExpDlgSTStep4ID Enable
			Alter Control ExpDlgSTStep5ID Enable
			Alter Control ExpDlgSTStep6ID Enable
			Alter Control ExpDlgOKBtnID Enable
		End If

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub LayerSettingsDialog

'************************************************************************************
Sub StyleSettingsDialog
'************************************************************************************

OnError Goto HandleError

	Dialog
		Title "Style Settings"
		Control StaticText Title "For Point Data:"
		Control RadioGroup Title "Use &Icon from File; Use &divIcon" Value iPointStyleSetting Into iPointStyleSetting
		Control OKButton Title "&OK"
		Control CancelButton Title "&Cancel"
		Control Button Title "&Help" Calling AddIn_Help

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub StyleSettingsDialog

'************************************************************************************
Sub LSDlgOKBtnHandler
'************************************************************************************

OnError Goto HandleError

Dim i As Integer

	lAddColumnNames = ReadControlValue(LSDlgCBAddColNmID)
	lFirstColumnBold = ReadControlValue(LSDlgCBCol1BoldID)
	sLayerNamePub = ReadControlValue(LSDlgETLNameID)  'Visible for the user in the Leaflet Layers Control
	sFeatureCollection = ReplaceSubStringWith(LCase$(sLayerNamePub), Chr$(32), Chr$(95)) 'Used as the GeoJSON var name
	If ReadControlValue(LSDlgPUMTTipID) > 1 Then
		sTooltipCol = sColumnsList(ReadControlValue(LSDlgPUMTTipID))
	Else
		sTooltipCol = sColumnsList(2)
	End If

	ReDim Columns2Export(UBound(sColumnsListPopup))

	For i = 1 to UBound(sColumnsListPopup)
		Columns2Export(i).sColName = sColumnsListPopup(i)
		If sColumnsListPopup(i) = sHyperlink Then
			Columns2Export(i).lHyperlink = TRUE
			If ReadControlValue(LSDlgPUMAliasID) > 1 Then
				Columns2Export(i).sAlias = sColumnsList(ReadControlValue(LSDlgPUMAliasID))
			Else
				Columns2Export(i).sAlias = sHyperlink
			End If
		Else
			Columns2Export(i).lHyperlink = FALSE
			Columns2Export(i).sAlias = ""
		End If
	Next

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub LSDlgOKBtnHandler

'*********************************************************************************************
Sub NonAddedColumnsHandler
'*********************************************************************************************

OnError GoTo HandleError

	If CommandInfo(CMD_INFO_DLG_DBL) Then
		Call ModifyColumnsListPopupAdd
		Alter Control LSDlgBtnAddID Disable
	Else
		Alter Control LSDlgBtnAddID Enable
	End If

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub NonAddedColumnsHandler

'*********************************************************************************************
Sub AddedColumnsHandler
'*********************************************************************************************

OnError GoTo HandleError

	If CommandInfo(CMD_INFO_DLG_DBL) Then
		Call ModifyColumnsListPopupRemove
		Alter Control LSDlgBtnRemID Disable
	Else
		Alter Control LSDlgBtnRemID Enable
	End If

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub AddedColumnsHandler

'*********************************************************************************************
Sub ModifyColumnsListPopupAdd
'*********************************************************************************************

OnError GoTo HandleError

	Call ModifyColumnsListPopup(1)

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopupAdd

'*********************************************************************************************
Sub ModifyColumnsListPopupAddAll
'*********************************************************************************************

OnError GoTo HandleError

	Call ModifyColumnsListPopup(2)

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopupAddAll

'*********************************************************************************************
Sub ModifyColumnsListPopupRemove
'*********************************************************************************************

OnError GoTo HandleError

	Call ModifyColumnsListPopup(3)

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopupRemove

'*********************************************************************************************
Sub ModifyColumnsListPopupRemoveAll
'*********************************************************************************************

OnError GoTo HandleError

	Call ModifyColumnsListPopup(4)

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopupRemoveAll

'*********************************************************************************************
Sub ModifyColumnsListPopup(ByVal iOperation As Integer)
'*********************************************************************************************

OnError GoTo HandleError

Dim i, j, k As Integer
Dim sTempArray() As String

	Do Case iOperation
		Case 1 'Add
			i = UBound(sColumnsListPopup) + 1
			Redim sColumnsListPopup(i)
			sColumnsListPopup(i) = sColumnsListNonPopup(ReadControlValue(LSDlgLBLayersNotAddedID))

			For i = 1 to UBound(sColumnsListNonPopup)
				If sColumnsListNonPopup(i) <>  sColumnsListNonPopup(ReadControlValue(LSDlgLBLayersNotAddedID)) Then
					j = UBound(sTempArray) + 1								
					ReDim sTempArray(j)
					sTempArray(j) = sColumnsListNonPopup(i)
				End If
			Next
			ReDim sColumnsListNonPopup(UBound(sTempArray))
			For i = 1 to UBound(sTempArray)
				sColumnsListNonPopup(i) = sTempArray(i)			
			Next
			ReDim sTempArray(0)

			Alter Control LSDlgLBLayersNotAddedID Title From Variable sColumnsListNonPopup
			Alter Control LSDlgLBLayersAddedID Title From Variable sColumnsListPopup
			Alter Control LSDlgBtnAddID Disable
			Alter Control LSDlgBtnAddAllID Disable
			Alter Control LSDlgBtnRemID Disable
			If UBound(sColumnsListNonPopup) = 0 Then
				Alter Control LSDlgBtnRemAllID Enable
			Else
				Alter Control LSDlgBtnRemAllID Disable
			End If
			
		Case 2 'Add All
			ReDim sColumnsListPopup(UBound(sColumnsListNonPopup))
			For i = 1 to UBound(sColumnsListNonPopup)
				sColumnsListPopup(i) = sColumnsListNonPopup(i)			
			Next
			ReDim sColumnsListNonPopup(0)
			Alter Control LSDlgLBLayersNotAddedID Title From Variable sColumnsListNonPopup
			Alter Control LSDlgLBLayersAddedID Title From Variable sColumnsListPopup
			Alter Control LSDlgBtnAddID Disable
			Alter Control LSDlgBtnAddAllID Disable
			Alter Control LSDlgBtnRemID Disable
			Alter Control LSDlgBtnRemAllID Enable
		Case 3 'Remove
			i = UBound(sColumnsListNonPopup) + 1
			Redim sColumnsListNonPopup(i)
			sColumnsListNonPopup(i) = sColumnsListPopup(ReadControlValue(LSDlgLBLayersAddedID))

			For i = 1 to UBound(sColumnsListPopup)
				If sColumnsListPopup(i) <>  sColumnsListPopup(ReadControlValue(LSDlgLBLayersAddedID)) Then
					j = UBound(sTempArray) + 1								
					ReDim sTempArray(j)
					sTempArray(j) = sColumnsListPopup(i)
				End If
			Next
			ReDim sColumnsListPopup(UBound(sTempArray))
			For i = 1 to UBound(sTempArray)
				sColumnsListPopup(i) = sTempArray(i)			
			Next
			ReDim sTempArray(0)

			Alter Control LSDlgLBLayersNotAddedID Title From Variable sColumnsListNonPopup
			Alter Control LSDlgLBLayersAddedID Title From Variable sColumnsListPopup
			Alter Control LSDlgBtnAddID Disable
			If UBound(sColumnsListPopup) = 0 Then
				Alter Control LSDlgBtnAddAllID Enable
			Else
				Alter Control LSDlgBtnAddAllID Disable
			End If
			Alter Control LSDlgBtnRemID Disable
			Alter Control LSDlgBtnRemAllID Disable
		
		Case 4 'Remove All
			ReDim sColumnsListNonPopup(UBound(sColumnsListPopup))
			For i = 1 to UBound(sColumnsListPopup)
				sColumnsListNonPopup(i) = sColumnsListPopup(i)			
			Next
			ReDim sColumnsListPopup(0)
			Alter Control LSDlgLBLayersNotAddedID Title From Variable sColumnsListNonPopup
			Alter Control LSDlgLBLayersAddedID Title From Variable sColumnsListPopup
			Alter Control LSDlgBtnAddID Disable
			Alter Control LSDlgBtnAddAllID Enable
			Alter Control LSDlgBtnRemID Disable
			Alter Control LSDlgBtnRemAllID Disable
	End Case

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopup

'************************************************************************************
Sub CheckForHyperlinks
'************************************************************************************

OnError Goto HandleError

Dim sQuery As String
Dim i, j, k As Integer

	For i = 2 to UBound(sColumnsList)
		k = 0
		sQuery = "Select " + sColumnsList(i) + " From " + sTable2Export + " Group By 1 Into TestTable"
		Run Command sQuery
	
		For j = 1 To TableInfo(TestTable, TAB_INFO_NROWS)
			Fetch Rec j From TestTable
			If LooksLikeURL(TestTable.Col1) Then
				k = k + 1
			End If
		Next
	
		If k > 0 Then
			sHyperlink = sColumnsList(i)
			Alter Control LSDlgGBHLnkID Enable
			Alter Control LSDlgSTHLColID Enable
			Alter Control LSDlgETHLColID Disable Value sHyperlink
			Alter Control LSDlgSTAliasID Enable
			Alter Control LSDlgPUMAliasID Enable Title From Variable sColumnsList Value i
			Alter Control LSDlgBtnRemHLID Enable
			Exit For
		End If
	Next

	Close Table TestTable

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub CheckForHyperlinks

'************************************************************************************
Sub RemoveHyperLink
'************************************************************************************

OnError Goto HandleError

		sHyperlink = ""
		Alter Control LSDlgGBHLnkID Disable
		Alter Control LSDlgSTHLColID Disable
		Alter Control LSDlgETHLColID Disable Value sHyperlink
		Alter Control LSDlgSTAliasID Disable
		Alter Control LSDlgPUMAliasID Disable Title ""
		Alter Control LSDlgBtnRemHLID Disable

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub RemoveHyperLink

'************************************************************************************
Sub SetHTMLFilePath 
'************************************************************************************

OnError Goto HandleError

Dim sNewHTMLFilePath As String

	'Here the user is given the possibility to choose a folder and name for the html file
	sNewHTMLFilePath = FileSaveAsDlg(PathToDirectory$(sHTMLFilePath), PathToFileName$(sHTMLFilePath), "*.*", "Choose a folder and a name for the html file")
	
	If sNewHTMLFilePath <> "" Then
		sHTMLFilePath = sNewHTMLFilePath
		Alter Control ExpDlgETHTMLFilePathID Value sHTMLFilePath
	End If

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub SetHTMLFilePath

'*********************************************************************************************
Sub GetPointTables
'*********************************************************************************************

OnError GoTo HandleError

	Dim i, j as Integer

	j = 1
	ReDim sTableList(j)
	
	sTableList(1) = "<-- Please select a table -->"
	
	For i = 1 to NumTables()

		If IsPointTable(TableInfo(i, TAB_INFO_NAME)) Then
			If NoOfColumns(TableInfo(i, TAB_INFO_NAME), sColumnsList) > 0 Then
				j = j + 1
				ReDim sTableList(j)
				sTableList(j) = TableInfo(i, TAB_INFO_NAME)
			End If
		End If
	Next

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub GetPointTables

'************************************************************************************
Sub About
'************************************************************************************

	Dialog 
		Title "About " + AppName + " (Version " + AppVersion + ")" 
		Control StaticText Title "With " + AppName + " you can export a MapInfo table to a web page" Position 1dW, 1dH
		Control StaticText Title "using Leaflet - the output consists of an html file, a js file." Position 1dW, 2dH
		Control StaticText Title "(containing a GeoJSON FeatureCollection) and a css file for the styling." Position 1dW, 3dH
		Control StaticText Title "Leaflet is a modern open-source JavaScript library for mobile-friendly" Position 1dW, 5dH
		Control StaticText Title "interactive maps." Position 1dW, 6dH
		Control StaticText Title "More information:" Position 1dW, 8dH
		Control Button Title "http://leafletjs.com/" Position 16dW, 8dH Calling LeafletWebsite
		Control StaticText Title "This version is compatible with the 'classic' 32 bit version of" Position 1dW, 10.5dH
		Control StaticText Title "MapInfo Professional (9.5 or higher)" Position 1dW, 11.5dH
		Control StaticText Title Chr$(169) + " 2014 - TWIAV.NL" Position 36dW, 13dH
		Control OKButton Title "&Exit" Calling Bye
		Control CancelButton Title "&Cancel"
		Control Button Title "&Help" Calling AddIn_Help

End Sub About

'*********************************************************************************************
Sub Bye
'*********************************************************************************************

	Dim lFinished as Logical
	
	lFinished = AskAgain("Are you sure you want to remove the application " + AppName + "?", AppName)
	
	If Not lFinished Then
		Dialog Preserve
	Else
		End Program
	End if

End Sub Bye

'************************************************************************************
Sub LeafletWebsite
'************************************************************************************

OnError Goto HandleError

	Call OpenFileOrDir("http://leafletjs.com/")

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub LeafletWebsite

'************************************************************************************
 Sub AddIn_Help
'************************************************************************************

	Call OpenFileOrDir(ApplicationDirectory$() + "Documentation\MapInfo2Leaflet User Guide.pdf")

End Sub AddIn_Help

'************************************************************************************
Function IsPointTable(ByVal sTable As String) As Logical

OnError GoTo HandleError

	Dim sQuery As String
	
	sQuery = "Select obj from " + sTable + " Group By 1 Into TestTable"
	Run Command sQuery
	
	If TableInfo("TestTable", TAB_INFO_NROWS) = 1 Then
		Fetch Rec 1 From TestTable
		If TestTable.Col1 = "Point" Then
			IsPointTable = TRUE
		Else
			IsPointTable = FALSE
		End If
	End If
	Close Table TestTable

Exit Function
'---------------------------
HandleError:
    IsPointTable = FALSE

End Function

'************************************************************************************

Function ReplaceSubStringWith(ByVal sString2Modify As String, ByVal sReplaceSubString As String, ByVal sReplaceWith As String) As String
	Dim iPtr1, iPtr2 as Integer
	Dim sBegin, sEnd, sTemp As String
	
	sTemp = Chr$(169) + Chr$(38)+ Chr$(181) + Chr$(167) '©&µ§

	If InStr(1, sString2Modify, sTemp) > 0 Or sReplaceSubString = sTemp Then 'Highly unlikely :-) But we'd better be sure :-) 
		sTemp = Chr$(37) + Chr$(126)+ Chr$(64) + Chr$(62) '%~@>
	End If

	'Step 1: replace sReplaceSubString with temporary value
	iPtr1 = InStr(1, sString2Modify, sReplaceSubString)

	While (iPtr1 > 0)
		sBegin = Left$(sString2Modify, iPtr1 - 1)
		iPtr2 = iPtr1 + Len(sReplaceSubString) - 1 'If sReplaceSubString is a single character iPtr2 should be the same as iPtr1
		sEnd = Right$(sString2Modify, Len(sString2Modify) - iPtr2)
		sString2Modify = sBegin & sTemp & sEnd
		iPtr1 = InStr(1, sString2Modify, sReplaceSubString)
	Wend

	'Step 2: replace temporary value with sReplaceWith.
	'This 2-step approach allows for the sReplaceWith to contain sReplaceSubString, e.g. when you need to replace 'ab' with 'abc'
	iPtr1 = InStr(1, sString2Modify, sTemp)

	While (iPtr1 > 0)
		sBegin = Left$(sString2Modify, iPtr1 - 1)
		iPtr2 = iPtr1 + Len(sTemp) - 1
		sEnd = Right$(sString2Modify, Len(sString2Modify) - iPtr2)
		sString2Modify = sBegin & sReplaceWith & sEnd
		iPtr1 = InStr(1, sString2Modify, sTemp)
	Wend

	ReplaceSubStringWith = sString2Modify

End Function

'************************************************************************************
Function NoOfColumns (ByVal sTab As String, sColumnsList() As String) As Integer
'*********************************************************************************************

	Dim iCounter, jCounter as Integer
	
	jCounter = 1
	ReDim sColumnsList(jCounter)

	sColumnsList(1) = "<-- Please select a column -->"

	For iCounter = 1 to NumCols(sTab)
			jCounter = jCounter + 1
			ReDim sColumnsList(jCounter)
			sColumnsList(jCounter) = ColumnInfo(sTab,"COL" & iCounter ,COL_INFO_NAME)
	Next
	
	NoOfColumns = UBound(sColumnsList) - 1
	
End Function

'************************************************************************************
Function LooksLikeURL(ByVal sPotentialURL As String) As Logical
'************************************************************************************

	If LCase$(Left$(sPotentialURL,4)) = "http" Then
		LooksLikeURL = TRUE
	Else
		LooksLikeURL = FALSE
	End If

End Function

'*********************************************************************************************
Function LayerIsInMap(ByVal iWindowID As Integer, ByVal sLayerName As String) As Logical

OnError Goto HandleError

Dim iNumLayers, i As Integer
	
	LayerIsInMap = False

	If WindowInfo(iWindowID, WIN_INFO_TYPE) = WIN_MAPPER Then

		iNumLayers = MapperInfo(iWindowID, MAPPER_INFO_LAYERS)

		For i = 1 To iNumLayers
			If sLayerName = LayerInfo(iWindowID, i, LAYER_INFO_NAME) Then
				LayerIsInMap = True
				Exit For
			End If
		Next

	End If

Exit Function
'---------------------------
HandleError:
  LayerIsInMap = False
End Function