'************************************************************************************
'**  MapInfo2Leaflet32 (for the 'classic' 32 bit version MapInfo Professional 9.5 or higher)
'**  Export Module
'**  
'**  Author:	Egge-Jan Pollé
'**  Date:		3 November 2014
'************************************************************************************
Include "MapInfo2Leaflet32.def"

'************************************************************************************
Sub ExportDialog
'************************************************************************************

OnError Goto HandleError

	'Set CoordSys to WGS84
	Set CoordSys Earth Projection 1, 104

	If iPointStyleSetting = 0 Then
		iPointStyleSetting = 1
	End If

	If iTarget = 0 Then
		iTarget = 2
	End If
	
	If sExportFolder = "" Then
		sExportFolder = GetFolderPath$(FOLDER_MYDOCS) + "\"
	End If

	Call GetVectorTables

	Dialog
		Title sDescription
		Control StaticText Title "Select &Table to Export:" Position 3dW, 1dH
		Control PopUpMenu Title From Variable sTableList Value 1 Position 3dW, 2.5dH Width 45dW ID ExpDlgPUMTableID Calling EnableLayerSelection
	
		Control Button Title "Set &Layer Settings" Position 50dW, 2.5dH ID ExpDlgBtnLaySetID Disable Calling LayerSettingsDialog

		Control StaticText Title "Set Title for &Web Page:" Position 3dW, 4.5dH Disable ID ExpDlgSTTitleWebPageID
		Control EditText Position 3dW, 6dH Width 75dW Disable ID ExpDlgETTitleWebPageID

		Control StaticText Title "Set &html file:" Position 3dW, 8dH Disable ID ExpDlgSTHTMLFileID
		Control Button Title "..." Width 4dW Position 3dW, 9.25dH Disable ID ExpDlgBtnSetHTMLFilePathID Calling SetHTMLFilePath
		Control EditText Position 8dW, 9.5dH Width 70dW Disable ID ExpDlgETHTMLFilePathID

		Control Button Title "Set &Point Style Settings" Position 50dW, 11.5dH Hide ID ExpDlgBtnPointStyleSetID Calling PointStyleSettingsDialog
		Control Button Title "Set Colo&r" Position 50dW, 11.5dH Hide ID ExpDlgBtnSetColorID Calling ColorSettingsDialog

		Control StaticText Title "PROCEDURE:" Position 3dW, 11.5dH
		Control StaticText Title "Step 1: Select Table to Export" Position 3dW, 13dH
		Control StaticText Title "Step 2: Set Layer Settings" Position 3dW, 14.5dH Disable ID ExpDlgSTStep2ID
		Control StaticText Title "Step 3: Set Title for Web Page" Position 3dW, 16dH Disable ID ExpDlgSTStep3ID
		Control StaticText Title "Step 4: Set html file" Position 3dW, 17.5dH Disable ID ExpDlgSTStep4ID
		Control StaticText Title "Step 5: Set Style Settings" Position 3dW, 19dH Disable ID ExpDlgSTStep5ID
		Control StaticText Title "Step 6: Click OK to Export" Position 3dW, 20.5dH Disable ID ExpDlgSTStep6ID
	
		Control OKButton Title "&OK" Disable ID ExpDlgOKBtnID Calling ExpDlgOKBtnHandler
		Control CancelButton Title "&Cancel" ID ExpDlgCancelBtnID
		Control Button Title "&Help" Calling AddIn_Help
		
		If CommandInfo(CMD_INFO_DLG_OK) Then
			Call CreateWebMapApplication
		Else 'User canceled
			Exit Sub
		End If

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ExportDialog

'************************************************************************************
Sub CreateWebMapApplication
'************************************************************************************

OnError Goto HandleError

Dim i, j, k, m, iNumRows, iObjectType, iGeoJSONLayerType As Integer
Dim fX, fY As Float
Dim aColj, aObjCol As Alias
Dim sString, sPopUpString, sColumnText, sValue, sCurDate, sStyleValue, sIconValue, sZoomToFeatureFunction,
	sStyleFunction, sHighlightFeatureFunction, sResetHighlightFunction, sOnEachFeatureFunction, sGeoJSONGeomObjType, sCoordinates,
	sOptionHighLighting, sFeatureString, sCrsString, sLayerNo, sPropertiesString, sTargetText, sThemeColoring, sBorderLineWeightValuePolygon,
	sBorderColorValuePolygon, sFillColorValuePolygon, sFillOpacityValuePolygon, sRanges, sValues As String
Dim oTmpObject As Object

Include "ReplacementStrings.mb"

	sCurDate = CurDate()
	sCurDate = RegionalLongDate(sCurDate)

'---------------------------------------
Call CreateDir(sExportFolder + "js")
Open File sGeoJSONFilePathTmp For Output Access Write As #1 CharSet SystemInfo(SYS_INFO_CHARSET)'"WindowsLatin1"
Open File sHTMLFilePathTmp For Output Access Write As #2 CharSet SystemInfo(SYS_INFO_CHARSET)'"WindowsLatin1"
OnError Goto HandleErrorDuringFileCreation

'--------------------------------------------------------------------------
' SOME USEFUL NOTES ON INCLUDING HTML CONTENT IN A (GEO)JSON DATA STRUCTURE
'--------------------------------------------------------------------------
' The JSON spec does not have many restrictions. JSON data is either a string, a number, a boolean, an object, an array, or null. As long as your data is formatted as one of these types, it should be valid. However, if your data contains HTML, there are certain things that you need to do to keep the browser happy when using your JSON data within Javascript.
'
' 1. Escape quotation marks used around HTML attributes like so <img src=\"someimage.png\"/>
' 2. Escape the forward slash in HTML end tags. <div>Hello World!<\/div>. This is an ancient artifact of an old HTML spec that didn’t want html parsers to get confused when putting strings in a <SCRIPT> tag. For some reason, today’s browsers still like it.
' 3. This one was totally bizarre. You should include a space between the tag name and the slash on self closing tags. I have no idea why this is, but on MOST modern browsers, if you try using javascript to append a <li> tag as a child of an unordered list that is formatted like so: <ul/>, it won’t work. It gets added to the DOM after the ul tag. But, if the code looks like this: <ul /> (notice the space after the /), everything works fine. Very strange indeed.
' 4. Be sure to encode any quotation marks that might be included in (bad) HTML content. This is the only thing that would really break the JSON by accidentally terminating the string early. Any " characters should be encoded as &quot; if it is meant to be included as HTML content.
'
' Source: http://www.thorntech.com/2012/07/4-things-you-must-do-when-putting-html-in-json/
'--------------------------------------------------------------------------
' Populate the GeoJSON/Javascript file first with a FeatureCollection
'--------------------------------------------------------------------------
Print #1, "//Table: " + sTable2Export + ".TAB (exported from MapInfo Professional using " + AppName + ".MBX)" 
Print #1, "//Date: " + sCurDate
Print #1, "var " + sFeatureCollection + " = {" + Chr$(34) + "type" + Chr$(34) + ":" + Chr$(34) + "FeatureCollection" + Chr$(34) + "," + Chr$(34) + "features" + Chr$(34) + ": ["

iNumRows = TableInfo(sTable2Export, TAB_INFO_NROWS)

For i = 1 to iNumRows
	Fetch Rec i From sTable2Export
	sPropertiesString = ""
	If lAddColumnNames Then
		sPopUpString = "<table class = " + Chr$(92) + Chr$(34) + "miPopupTable" + Chr$(92) + Chr$(34) + ">"
	Else
		sPopUpString = ""
	End If
	sTooltipCol = LCase$(ReplaceMultipleSubStrings(sTooltipCol, tAccentuatedCharacters))
	For j = 1 to UBound(Columns2Export)
		sColumnText = ""
		aColj = sTable2Export + "." + Columns2Export(j).sColName
		sValue = aColj
		If sValue = "" Then
			Goto NextLabel
		End If

		sPropertiesString = sPropertiesString + Chr$(34) + LCase$(ReplaceMultipleSubStrings(Columns2Export(j).sColName, tAccentuatedCharacters)) + Chr$(34) +":"
		
		Do Case ColumnInfo(sTable2Export, Columns2Export(j).sColName, COL_INFO_TYPE)

			Case COL_TYPE_DECIMAL, COL_TYPE_FLOAT, COL_TYPE_INTEGER, COL_TYPE_SMALLINT
				sPropertiesString = sPropertiesString + sValue + ","
			Case COL_TYPE_LOGICAL
				If sValue = "T" Then
					sPropertiesString = sPropertiesString + "true,"
				Else
					sPropertiesString = sPropertiesString + "false,"
				End If
			Case Else
				sPropertiesString = sPropertiesString + Chr$(34) + sValue + Chr$(34) + ","

		End Case

		If Columns2Export(j).lInToolTip Then
			If ColumnInfo(sTable2Export, Columns2Export(j).sColName, COL_INFO_TYPE) = COL_TYPE_CHAR Then
				sValue = ReplaceMultipleSubStrings(sValue, tHTMLCharacters)
			End If
			If lAddColumnNames Then
				sColumnText = ReplaceSubStringWith(Columns2Export(j).sColName, Chr$(95), Chr$(32)) + "<" + Chr$(92) + "/td><td>"
			End If
			If Columns2Export(j).lHyperlink And LooksLikeURL(sValue) Then
				If iTarget = 2 Then
					sTargetText = " target=" + Chr$(92) + Chr$(34) + "_blank" + Chr$(92) + Chr$(34)
				Else
					sTargetText = ""
				End If
				sColumnText = sColumnText + "<a href=" + Chr$(92) + Chr$(34) + sValue + Chr$(92) + Chr$(34) + sTargetText + ">"
				aColj = sTable2Export + "." + Columns2Export(j).sAlias
				sValue = aColj
				If ColumnInfo(sTable2Export, Columns2Export(j).sAlias, COL_INFO_TYPE) = COL_TYPE_CHAR Then
					sValue = ReplaceMultipleSubStrings(sValue, tHTMLCharacters)
				End If
				sColumnText = sColumnText + sValue + "<" + Chr$(92) + "/a>"
			Else
				sColumnText = sColumnText + sValue
			End If
			If lFirstColumnBold And j = 1 Then
				sColumnText = "<b>" + sColumnText + "<" + Chr$(92) + "/b>"
			End If
			If lAddColumnNames Then
				sColumnText = "<tr><td>" + sColumnText + "<" + Chr$(92) + "/td><" + Chr$(92) + "/tr>"
			Else
				sColumnText = sColumnText + "<br>"
			End If
			sPopUpString = sPopUpString + sColumnText
		End If
	NextLabel:
	Next
	If lAddColumnNames Then
		sPopUpString = sPopUpString + "<" + Chr$(92) + "/table>"
	End If

	aObjCol = sTable2Export + ".obj"

	iObjectType = ObjectInfo(aObjCol, OBJ_INFO_TYPE)

	sGeoJSONGeomObjType = ""
	sCoordinates = ""

	Do Case iObjectType
		'From the GeoJSON Format Specification, on the "coordinates" member of a geometry object:
		'The order of elements must follow x, y, z order (easting, northing, altitude for coordinates in a projected coordinate
		'reference system, or longitude, latitude, altitude for coordinates in a geographic coordinate reference system).
	
		Case OBJ_TYPE_POINT

			sGeoJSONGeomObjType = "Point"

			sCoordinates = CentroidX(aObjCol) + ", " + CentroidY(aObjCol) 'First Longitude (X), then Latitude (Y)
			
			iGeoJSONLayerType = GeoJSONPointLayer

		Case 11 'MultiPoint

			sGeoJSONGeomObjType = "MultiPoint"

			For m = 1 to ObjectInfo(aObjCol, OBJ_INFO_NPNTS)
				sCoordinates = sCoordinates + "[" + ObjectNodeX(aObjCol, 1000, m) + ", " + ObjectNodeY(aObjCol, 1000, m) + "]"
				If m < ObjectInfo(aObjCol, OBJ_INFO_NPNTS) Then
					sCoordinates = sCoordinates + ", "
				End If
			Next

			iGeoJSONLayerType = GeoJSONPointLayer

		Case OBJ_TYPE_PLINE
			
			Call ProcessPline(aObjCol, sGeoJSONGeomObjType, sCoordinates)

			iGeoJSONLayerType = GeoJSONLineStringLayer

		Case OBJ_TYPE_LINE, 'What more is a line than a polyline with just one segment? :-)
			OBJ_TYPE_ARC 'GeoJSON does not support arcs

			oTmpObject = ConvertToPline(aObjCol)
			
			Call ProcessPline(oTmpObject, sGeoJSONGeomObjType, sCoordinates)

			iGeoJSONLayerType = GeoJSONPolygonLayer

		Case OBJ_TYPE_REGION 'GeoJSON Polygon or MultiPolygon

			Call ProcessRegion(aObjCol, sGeoJSONGeomObjType, sCoordinates)

			iGeoJSONLayerType = GeoJSONPolygonLayer

		Case OBJ_TYPE_ELLIPSE, 'GeoJSON does not support ellipses (or circles); they need to be converted to regions (watch out: lot of points for a simple circle)
			OBJ_TYPE_RECT, OBJ_TYPE_ROUNDRECT 'Rectangles (and rounded rectangles) will be converted to regions (GeoJSON Polygons) as well

			oTmpObject = ConvertToRegion(aObjCol)
			
			Call ProcessRegion(oTmpObject, sGeoJSONGeomObjType, sCoordinates)

			iGeoJSONLayerType = GeoJSONPolygonLayer

	End Case

	sFeatureString = "{" + Chr$(34) + "type" + Chr$(34) + ":" + Chr$(34) + "Feature" + Chr$(34) + "," + Chr$(34) + "properties" + Chr$(34) + ":{"
	sFeatureString = sFeatureString + sPropertiesString
	sFeatureString = sFeatureString + Chr$(34) + "popupContent" + Chr$(34) + ":" + Chr$(34) + sPopUpString + Chr$(34) + "},"
	sFeatureString = sFeatureString + Chr$(34) + "geometry" + Chr$(34) + ":{" + Chr$(34) + "type" + Chr$(34) + ":" + Chr$(34)
	sFeatureString = sFeatureString + sGeoJSONGeomObjType + Chr$(34) + "," + Chr$(34) + "coordinates" + Chr$(34) + ":[" + sCoordinates + "]" + "}"
	If i < iNumRows Then
		sFeatureString = sFeatureString + "},"
	Else
		sFeatureString = sFeatureString + "}"
	End If
	
	Print #1, sFeatureString
Next

sCrsString = Chr$(34) + "crs" + Chr$(34) + ":{" + Chr$(34) + "type" + Chr$(34) + ":" + Chr$(34) + "EPSG" + Chr$(34) + ","
sCrsString = sCrsString + Chr$(34) + "properties" + Chr$(34) + ":{" + Chr$(34) + "code" + Chr$(34) + ":"
sCrsString = sCrsString + Chr$(34) + "4326" + Chr$(34) + "}}"

Print #1, "]," + sCrsString + "};"

'--------------------------------------------------------------------------
' Create the html file
'--------------------------------------------------------------------------

sLayerNo = "L1" 'Any layer specific Javascript functions will get this layer number attached to them
'At the moment this tool will only export 1 table/layer at the time (maybe later more?)
'If you want to merge multiple layers in one file, they should for example not all have a function onEachFeature
'attached to them, but rather onEachFeatureL1, onEachFeatureL2, etc.
Print #2, "<!DOCTYPE html>"
Print #2, "<html>"
Print #2, "<head>"
Print #2, Chr$(9) + "<title>" + sTitleWebsite + "</title>"
Print #2, Chr$(9) + "<meta http-equiv=" + Chr$(34) + "Content-Type" + Chr$(34) + " content=" + Chr$(34) + "text/html;charset=UTF-8" + Chr$(34) + ">"
Print #2, Chr$(9) + "<meta name=" + Chr$(34) + "viewport" + Chr$(34) + " content=" + Chr$(34) + "width=device-width, initial-scale=1.0" + Chr$(34) + ">"
Print #2, Chr$(9) + "<link rel=" + Chr$(34) + "stylesheet" + Chr$(34) + " href=" + Chr$(34) + "leaflet-0.7.3/leaflet.css" + Chr$(34) + " />"
Print #2, Chr$(9) + "<link rel=" + Chr$(34) + "stylesheet" + Chr$(34) + " href=" + Chr$(34) + "leaflet-plugins/leaflet.label.css" + Chr$(34) + " />"
Print #2, Chr$(9) + "<link rel=" + Chr$(34) + "stylesheet" + Chr$(34) + " href=" + Chr$(34) + "leaflet-plugins/leaflet-search.min.css" + Chr$(34) + " />"
Print #2, Chr$(9) + "<link rel=" + Chr$(34) + "stylesheet" + Chr$(34) + " href=" + Chr$(34) + "css/page.css" + Chr$(34) + " />"
Print #2, Chr$(9) + "<link rel=" + Chr$(34) + "stylesheet" + Chr$(34) + " href=" + Chr$(34) + "css/mapinfo.css" + Chr$(34) + " />"
Print #2, Chr$(9) + "<style>"
Print #2, Chr$(9) + Chr$(9) + ".miDivIcon {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "border: 3px solid #F8F8F8;"
If iPointShape = 1 Then
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "border-radius: 50%;"
End If
Print #2, Chr$(9) + Chr$(9) + "}"
Print #2, Chr$(9) + "</style>"
Print #2, "</head>"
Print #2, "<body>"
Print #2, Chr$(9) + "<header>"
Print #2, Chr$(9) + Chr$(9) + "<h1>" + sTitleWebsite + "</h1>"
Print #2, Chr$(9) + "</header>"
Print #2, Chr$(9) + "<div id=" + Chr$(34) + "main" + Chr$(34) + ">"
Print #2, Chr$(9) + Chr$(9) + "<div id=" + Chr$(34) + "map" + Chr$(34) + "></div>"
Print #2, Chr$(9) + Chr$(9) + "<br>"
Print #2, Chr$(9) + Chr$(9) + "<p>Table : " + sTable2Export + ".TAB, exported from MapInfo Professional (using the MapBasic application " + AppName + ".MBX)</p>"
Print #2, Chr$(9) + Chr$(9) + "<p>Date: " + sCurDate + "</p>"
Print #2, Chr$(9) + "</div>"
Print #2, Chr$(9) + "<script src=" + Chr$(34) + "js/" + PathToFileName$(sGeoJSONFilePath) + Chr$(34) + "></script>"
Print #2, Chr$(9) + "<script src=" + Chr$(34) + "leaflet-0.7.3/leaflet.js" + Chr$(34) + "></script>"
Print #2, Chr$(9) + "<script src=" + Chr$(34) + "leaflet-plugins/leaflet.label.js" + Chr$(34) + "></script>"
Print #2, Chr$(9) + "<script src=" + Chr$(34) + "leaflet-plugins/leaflet-search.min.js" + Chr$(34) + "></script>"
Print #2, Chr$(9) + "<script src=" + Chr$(34) + "leaflet-plugins/TileLayer.Grayscale.js" + Chr$(34) + "></script>"
Print #2, Chr$(9) + "<script>"
sLayerNameTech = sFeatureCollection + "Layer"
Print #2, Chr$(9) + Chr$(9) + "// The layer " + sLayerNameTech + " is referred to as '" + sLayerNo + "', i.e. all functions and variables specific to this layer have the suffix " + sLayerNo
Print #2, sDatasetBounds
Print #2
Print #2, Chr$(9) + Chr$(9) + "var map = L.map('map')." + sFitBounds + ".setMaxBounds(bounds);"
Print #2
Print #2, Chr$(9) + Chr$(9) + "// Limit the minimum zoom level to the bounds of the dataset to prevent users from leaving this area on the map"
Print #2, Chr$(9) + Chr$(9) + "var mz = map.getBoundsZoom(bounds, false);"
Print #2
Print #2, Chr$(9) + Chr$(9) + "var osmAttrib='Map data " + Chr$(169) + " <a href=" + Chr$(34) + "http://openstreetmap.org" + Chr$(34) + ">OpenStreetMap</a> contributors',"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "osmUrl='http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';"
Print #2
If lExportTheme Then
	Print #2, Chr$(9) + Chr$(9) + "var osm = L.tileLayer(osmUrl, {attribution: osmAttrib, minZoom: mz}).addTo(map);"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + "var osmgray = L.tileLayer.grayscale(osmUrl, {attribution: osmAttrib, minZoom: mz}).addTo(map);"
	Print #2
Else
	Print #2, Chr$(9) + Chr$(9) + "var osmgray = L.tileLayer.grayscale(osmUrl, {attribution: osmAttrib, minZoom: mz}).addTo(map);"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + "var osm = L.tileLayer(osmUrl, {attribution: osmAttrib, minZoom: mz}).addTo(map);"
	Print #2
End If
If lZoomInOnClick Then
	Do Case iGeoJSONLayerType

		Case GeoJSONPointLayer

			Print #2, Chr$(9) + Chr$(9) + "// When user clicks on a marker, the popup opens and the map will zoom in to this particular marker"
			Print #2, Chr$(9) + Chr$(9) + "map.on('popupopen', function(centerMarker) {"
			Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "var cM = map.project(centerMarker.popup._latlng);"
			Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "map.setView(map.unproject(cM),16, {animate: true});"
			Print #2, Chr$(9) + Chr$(9) + "});"
			Print #2

		Case GeoJSONLineStringLayer, GeoJSONPolygonLayer

			sZoomToFeatureFunction = "zoomToFeature" + sLayerNo
			
			Print #2, Chr$(9) + Chr$(9) + "function " + sZoomToFeatureFunction + "(e) {"
			Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "map.fitBounds(e.target.getBounds(), {padding:[25,25]});"
			Print #2, Chr$(9) + Chr$(9) +  "}"
			Print #2

	End Case
End If

If lExportTheme Then

	Print #2, Chr$(9) + Chr$(9) + "function getColor(d) {"
	
	Do Case iTheme

	Case 1 'Ranges

		sThemeColoring = ""
		For i = 1 To UBound(sValuesArray)
			If i < UBound(sValuesArray) Then
				sThemeColoring = Chr$(10) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "d >= " + sValuesArray(i) + " ? '" + sColorValsArray(i) + "' :" + sThemeColoring
			Else
				sThemeColoring = Chr$(9) + Chr$(9) + Chr$(9) + "return d >= " + sValuesArray(i) + " ? '" + sColorValsArray(i) + "' :" + sThemeColoring
			End If
		Next

	Case 2 'Individual Values
		sThemeColoring = ""
		For i = 1 To UBound(sValuesArray)
			If i < UBound(sValuesArray) Then
				sThemeColoring = Chr$(10) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "d == '" + sValuesArray(i) + "' ? '" + sColorValsArray(i) + "' :" + sThemeColoring
			Else
				sThemeColoring = Chr$(9) + Chr$(9) + Chr$(9) + "return d == '" + sValuesArray(i) + "' ? '" + sColorValsArray(i) + "' :" + sThemeColoring
			End If
		Next

	End Case

	Print #2, sThemeColoring
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "'" + sDefaultColor + "';"
	Print #2, Chr$(9) + Chr$(9) + "}"
	Print #2
	
	sBorderLineWeightValuePolygon = "1"
	sBorderColorValuePolygon = "'#C0C0C0'" 'Silver
	sFillOpacityValuePolygon = "0.8"
	sFillColorValuePolygon = "getColor(feature.properties." + LCase$(ReplaceMultipleSubStrings(sThemeCol, tAccentuatedCharacters)) + ")"
	
Else
	sBorderLineWeightValuePolygon = "2"
	sBorderColorValuePolygon = "'" + sObjectColor + "'"
	sFillOpacityValuePolygon = "0.05"
	sFillColorValuePolygon = "'" + sObjectColor + "'"
End If

'Styling
Do Case iGeoJSONLayerType

	Case GeoJSONPointLayer

		If iPointStyleSetting = 1 Then

			sIconValue = "pngIcon" + sLayerNo

			Print #2,  Chr$(9) + Chr$(9) + "var " + sIconValue + " = L.icon({"
			Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "iconUrl: 'blue-arrow.png',"
			Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "iconSize: [32, 37],"
			Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "iconAnchor: [16, 37],"
			Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "popupAnchor: [0, -28]"
			Print #2,  Chr$(9) + Chr$(9) + "});"
			
			Save File ApplicationDirectory$() + "blue-arrow.png" As sExportFolder + "blue-arrow.png"
			
		ElseIf iPointStyleSetting = 2 Then

			sIconValue = "divIcon" + sLayerNo

			Print #2, Chr$(9) + Chr$(9) + "var " + sIconValue + " = L.divIcon({"
			
			If iPointSize <> 12 Then
				Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "iconSize: new L.Point(" + iPointSize + ", " + iPointSize + "),"
			End If
			Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "background: " + sFillColorValuePolygon + ","
			Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "className: 'miDivIcon'"
			Print #2,  Chr$(9) + Chr$(9) + "});"
			
		End If

		sStyleValue = Chr$(9) + Chr$(9) + Chr$(9) + "pointToLayer: function (feature, latlng) {" + Chr$(10)
		sStyleValue = sStyleValue + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "return L.marker(latlng, {icon: " + sIconValue + "});" + Chr$(10)
		sStyleValue = sStyleValue + Chr$(9) + Chr$(9) + Chr$(9) + "}"
		
		sOptionHighLighting = ""

	Case GeoJSONLineStringLayer, GeoJSONPolygonLayer

		sStyleFunction = "style" + sLayerNo

		Print #2,  Chr$(9) + Chr$(9) + "function " + sStyleFunction + "(feature) {"
		Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + "return {"
		Do Case iGeoJSONLayerType
			Case GeoJSONLineStringLayer
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "weight: 5,"
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "opacity: 1,"
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "color: " + sFillColorValuePolygon
			Case GeoJSONPolygonLayer
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "weight: " + sBorderLineWeightValuePolygon + ","
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "opacity: 1,"
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "color: " + sBorderColorValuePolygon + ","
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "fillOpacity: " + sFillOpacityValuePolygon + ","
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "fillColor: " + sFillColorValuePolygon
		End Case
		Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + "};"
		Print #2,  Chr$(9) + Chr$(9) + "}"
		Print #2
		
		sHighlightFeatureFunction = "highlightFeature" + sLayerNo
		
		Print #2,  Chr$(9) + Chr$(9) + "function " + sHighlightFeatureFunction + "(e) {"
		Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + "var layer = e.target;"
		Print #2
		Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + "layer.setStyle({"
		Do Case iGeoJSONLayerType
			Case GeoJSONLineStringLayer
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "weight: 12"
			Case GeoJSONPolygonLayer
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "weight: 5,"
				Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "fillOpacity: 0.5"
		End Case
		Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + "});"
		Print #2
		Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + "if (!L.Browser.ie && !L.Browser.opera) {"
		Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "layer.bringToFront();"
		Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + "}"
		Print #2
		Print #2,  Chr$(9) + Chr$(9) + "}"
		Print #2
		
		sResetHighlightFunction = "resetHighlight" + sLayerNo
		
		Print #2,  Chr$(9) + Chr$(9) + "function " + sResetHighlightFunction + "(e) {"
		Print #2,  Chr$(9) + Chr$(9) + Chr$(9) + sLayerNameTech + ".resetStyle(e.target);"
		Print #2,  Chr$(9) + Chr$(9) + "}"

		sStyleValue = Chr$(9) + Chr$(9) + Chr$(9) + "style: " + sStyleFunction

		sOptionHighLighting = Chr$(10) + Chr$(9) + Chr$(9) + Chr$(9) + "layer.on({" + Chr$(10)
		sOptionHighLighting = sOptionHighLighting + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "mouseover: " + sHighlightFeatureFunction + "," + Chr$(10)
		sOptionHighLighting = sOptionHighLighting + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "mouseout: " + sResetHighlightFunction + Chr$(10)
		sOptionHighLighting = sOptionHighLighting + Chr$(9) + Chr$(9) + Chr$(9) + "});"

End Case

Print #2

sOnEachFeatureFunction = "onEachFeature" + sLayerNo

Print #2, Chr$(9) + Chr$(9) + "function " + sOnEachFeatureFunction + "(feature, layer) {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "if (feature.properties && feature.properties.popupContent) {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "layer.bindPopup(feature.properties.popupContent);"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "}"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "if (feature.properties && feature.properties." + sTooltipCol + ") {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "layer.bindLabel(feature.properties." + sTooltipCol + ");"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "}" + sOptionHighLighting

If lZoomInOnClick And iGeoJSONLayerType IN (GeoJSONLineStringLayer, GeoJSONPolygonLayer) Then

	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "// When user clicks on a feature the map will zoom in to this particular feature"
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "layer.on({"
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "click: " + sZoomToFeatureFunction
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "});"

End If

Print #2, Chr$(9) + Chr$(9) + "}"
Print #2
Print #2, Chr$(9) + Chr$(9) + "var " + sLayerNameTech + " = L.geoJson(" + sFeatureCollection + ", {"
Print #2, sStyleValue + ","
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "onEachFeature: " + sOnEachFeatureFunction
Print #2, Chr$(9) + Chr$(9) + "}).addTo(map);"
Print #2
Print #2, Chr$(9) + Chr$(9) + "var baseLayers = {"
If lExportTheme Then
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "OpenStreetMap" + Chr$(34) + ": osm,"
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "OpenStreetMap (Gray) " + Chr$(34) + ": osmgray"
Else
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "OpenStreetMap (Gray) " + Chr$(34) + ": osmgray,"
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + "OpenStreetMap" + Chr$(34) + ": osm"
End If
Print #2, Chr$(9) + Chr$(9) + "};"
Print #2
Print #2, Chr$(9) + Chr$(9) + "var overlays = {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(34) + sLayerNamePub + Chr$(34) + ": " + sLayerNameTech 
Print #2, Chr$(9) + Chr$(9) + "};"
Print #2
Print #2, Chr$(9) + Chr$(9) + "L.control.layers(baseLayers, overlays).addTo(map);"
Print #2
Print #2, Chr$(9) + Chr$(9) + "var searchControl = new L.Control.Search({layer: " + sLayerNameTech + ", propertyName: '" + sTooltipCol + "', circleLocation:false});"
Print #2
Print #2, Chr$(9) + Chr$(9) + "searchControl.on('search_locationfound', function(e) {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "e.layer.setStyle({fillColor: '#0000FF', color: '#0000FF'});"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "if(e.layer._popup)"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "e.layer.openPopup();"
Print #2, Chr$(9) + Chr$(9) + "}).on('search_collapsed', function(e) {"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "featuresLayer.eachLayer(function(layer) { //restore feature color"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "featuresLayer.resetStyle(layer);"
Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "});"	
Print #2, Chr$(9) + Chr$(9) + "});"
Print #2
Print #2, Chr$(9) + Chr$(9) + "map.addControl(searchControl); //inizialize search control"
Print #2
If lExportTheme Then
	Print #2, Chr$(9) + Chr$(9) + "var legend = L.control({position: 'bottomright'});"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + "legend.onAdd = function (map) {"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "var div = L.DomUtil.create('div', 'title legend'),"

	Do Case iTheme
	
	Case 1 'Ranges
	
		sRanges = "ranges = ["
		For i = 1 to UBound(sValuesArray)
			If i < UBound(sValuesArray) Then
				sRanges = sRanges + sValuesArray(i) + ", "
			Else
				sRanges = sRanges + sValuesArray(i) + "],"
			End If
		Next

		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + sRanges
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "maxValue = " + sMaxValue + ","
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "labels = [];"
		Print #2
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "// loop through the intervals and generate a label with a colored square for each"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "for (var i = 0; i < ranges.length; i++) {"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "div.innerHTML +="
		Do Case iGeoJSONLayerType
			Case GeoJSONPointLayer
				Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) +
				"'<div class=" + Chr$(34) + "miDivIcon" + Chr$(34) + " style=" + Chr$(34) + "background:' + getColor(ranges[i] + 1) + 'width: " +
				iPointSize + "px; height: " + iPointSize + "px; display: inline-block; margin-right: 5px;" + Chr$(34) + "></div>' +"
			Case GeoJSONLineStringLayer
				Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "'<hr style=" + Chr$(34) + "color:' + getColor(ranges[i] + 1) + '" + Chr$(34) + ">' +"
			Case GeoJSONPolygonLayer
				Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "'<i style=" + Chr$(34) + "background:' + getColor(ranges[i] + 1) + '" + Chr$(34) + "></i> ' +"
		End Case
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "ranges[i] + (ranges[i + 1] ? '&ndash;' + ranges[i + 1] + '<br>' : '&ndash;' + maxValue);"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "}"

	Case 2 'Individual Values
	
		sValues = "values = ["
		For i = 1 to UBound(sValuesArray)
			If i < UBound(sValuesArray) Then
				sValues = sValues + "'" + sValuesArray(i) + "', "
			Else
				sValues = sValues + "'" + sValuesArray(i) + "'],"
			End If
		Next

		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + sValues
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "labels = [];"
		Print #2
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "// loop through the intervals and generate a label with a colored square for each"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "for (var i = 0; i < values.length; i++) {"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "div.innerHTML +="
		Do Case iGeoJSONLayerType
			Case GeoJSONPointLayer
				Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) +
				"'<div class=" + Chr$(34) + "miDivIcon" + Chr$(34) + " style=" + Chr$(34) + "background:' + getColor(values[i]) + 'width: " +
				iPointSize + "px; height: " + iPointSize + "px; display: inline-block; margin-right: 5px;" + Chr$(34) + "></div>' +"
			Case GeoJSONLineStringLayer
				Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "'<hr style=" + Chr$(34) + "color:' + getColor(values[i]) + '" + Chr$(34) + ">' +"
			Case GeoJSONPolygonLayer
				Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "'<i style=" + Chr$(34) + "background:' + getColor(values[i]) + '" + Chr$(34) + "></i>' +"
		End Case
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + Chr$(9) + "values[i] + '<br>';"
		Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "}"

	End Case

	Print #2
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "div.innerHTML = '<b>" + sLegendTitle + "</b><br>" + sLegendSubTitle + "<br>' + div.innerHTML;"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "return div;"
	Print #2, Chr$(9) + Chr$(9) + "};"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + "legend.addTo(map);"
	Print #2
End If
If lMapTitle Then
	Print #2, Chr$(9) + Chr$(9) + "var title = L.control({position: 'bottomleft'});"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + "title.onAdd = function (map) {"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "var div = L.DomUtil.create('div', 'title');"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "div.innerHTML = '<b>" + sMapTilte + "</b>';"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + Chr$(9) + "return div;"
	Print #2, Chr$(9) + Chr$(9) + "};"
	Print #2
	Print #2, Chr$(9) + Chr$(9) + "title.addTo(map);"
	Print #2
End If
Print #2, Chr$(9) + "</script>"
Print #2, "</body>"
Print #2, "</html>"

Close File #1
Close File #2

OnError Goto HandleError

'Copy leaflet-0.7.3
Call CopyDir(ApplicationDirectory$() + "leaflet-0.7.3", sExportFolder + "leaflet-0.7.3")

'Copy leaflet-plugins
Call CopyDir(ApplicationDirectory$() + "leaflet-plugins", sExportFolder + "leaflet-plugins")

'Copy local css dir
Call CopyDir(ApplicationDirectory$() + "css", sExportFolder + "css")

' Convert the ANSI files to UTF-8
Call ConvertFileANSItoUTF8(sHTMLFilePathTmp, sHTMLFilePath)
If FileExists(sHTMLFilePathTmp) Then
	Kill sHTMLFilePathTmp 	
End If

Call ConvertFileANSItoUTF8(sGeoJSONFilePathTmp, sGeoJSONFilePath)
If FileExists(sGeoJSONFilePathTmp) Then
	Kill sGeoJSONFilePathTmp 	
End If

If AskAgain("Web Map Application created:" + Chr$(10) + sHTMLFilePath + Chr$(10) + Chr$(10) + "Do you want to open it in a browser?", AppName) Then
	Call OpenFileOrDir(sHTMLFilePath)
End If

'-------------------------------------------
		
Exit Sub
'---------------------------
HandleError:
	Note Error$()
	Exit Sub

'---------------------------
HandleErrorDuringFileCreation:
	Close File #1
	Close File #2
	Note Error$()

End Sub CreateWebMapApplication

'*********************************************************************************************
Sub EnableLayerSelection
'*********************************************************************************************

OnError GoTo HandleError

Dim i As Integer
Dim fX1, fY1, fX2, fY2, fX1ds, fY1ds, fX2ds, fY2ds, fX1mw, fY1mw, fX2mw, fY2mw As Float
Dim oMapWindow, oDataset As Object

'Temporary
sLegendTitle = "Title"
sLegendSubTitle = "Sub title"
lMapTitle = TRUE
sMapTilte = "Map Title"

	sFitBounds = ""
	sDatasetBounds = ""

	If ReadControlValue(ExpDlgPUMTableID) > 1 Then
		sTable2Export = sTableList(ReadControlValue(ExpDlgPUMTableID))
		If NoOfColumns(sTable2Export, sColumnsList) > 0 Then
			Alter Control ExpDlgBtnLaySetID Enable
			Alter Control ExpDlgSTStep2ID Enable
			Alter Control ExpDlgBtnPointStyleSetID Hide
			Alter Control ExpDlgBtnSetColorID Hide
			sHTMLFilePath = sExportFolder + sTable2Export + ".html"
			sHTMLFilePathTmp = sExportFolder + sTable2Export + "_tmp.html"
			sGeoJSONFilePath = sExportFolder + "js\" + sTable2Export + ".js"
			sGeoJSONFilePathTmp = sExportFolder + "js\" + sTable2Export + "_tmp.js"
			Alter Control ExpDlgETHTMLFilePathID Value sHTMLFilePath
			sTitleWebsite = ReplaceSubStringWith(sTable2Export, Chr$(95), Chr$(32))
			Alter Control ExpDlgETTitleWebPageID Value sTitleWebsite
			sLayerNamePub = ReplaceSubStringWith(sTable2Export, Chr$(95), Chr$(32))  'Visible for the user in the Leaflet Layers Control
			sFeatureCollection = ReplaceSubStringWith(LCase$(sLayerNamePub), Chr$(32), Chr$(95)) 'Used as the GeoJSON var name

			ReDim sColumnsListPopup(UBound(sColumnsList) - 1)
			For i = 2 To UBound(sColumnsList)
				sColumnsListPopup(i - 1) = sColumnsList(i)
			Next

			'Take the minimum and maximum x- and y-coordinates of all objects in the table
			fX1 = TableInfo(sTable2Export, TAB_INFO_MINX)
			fY1 = TableInfo(sTable2Export, TAB_INFO_MINY)
			fX2 = TableInfo(sTable2Export, TAB_INFO_MAXX)
			fY2 = TableInfo(sTable2Export, TAB_INFO_MAXY)

			'Put an additional margin around all the objects in the table
			fX1ds = fX1 - .15*(fX2-fX1)
			fY1ds = fY1 - .15*(fY2-fY1)
			fX2ds = fX2 + .15*(fX2-fX1)
			fY2ds = fY2 + .15*(fY2-fY1)
			
			For i = 1 To NumWindows()
				If LayerIsInMap(WindowID(i), sTable2Export) Then
					'If the table is present in a Map Window in MapInfo Professional during export
					'the map in the web page will be fit to the bounds of this Map Window
					fX1mw = MapperInfo(WindowID(i), MAPPER_INFO_MINX)
					fY1mw = MapperInfo(WindowID(i), MAPPER_INFO_MINY)
					fX2mw = MapperInfo(WindowID(i), MAPPER_INFO_MAXX)
					fY2mw = MapperInfo(WindowID(i), MAPPER_INFO_MAXY)
					
					sFitBounds = "fitBounds([[" + fY1mw + ", " + fX1mw + "], [" + fY2mw + ", " + fX2mw + "]])" 'South - West - North - East
					
					Create Rect Into Variable oMapWindow (fX1mw, fY1mw) (fX2mw, fY2mw)
					Create Rect Into Variable oDataset (fX1ds, fY1ds) (fX2ds, fY2ds)
					
					If oDataset Entirely Within oMapWindow Then
						fX1ds = fX1mw
						fY1ds = fY1mw
						fX2ds = fX2mw
						fY2ds = fY2mw
					End If
				End If
			Next
			If sFitBounds = "" Then
				'If the table is not present in a Map Window in MapInfo Professional during export
				'the map in the web page will be fit to the central part of the dataset
				fX1mw = fX1 + .35*(fX2-fX1)
				fY1mw = fY1 + .35*(fY2-fY1)
				fX2mw = fX2 - .35*(fX2-fX1)
				fY2mw = fY2 - .35*(fY2-fY1)
				sFitBounds = "fitBounds([[" + fY1mw + ", " + fX1mw + "], [" + fY2mw + ", " + fX2mw + "]])"
			End If

			sDatasetBounds = Chr$(9) + Chr$(9) + "// These are the bounds of the " + sFeatureCollection + " dataset, plus a margin" + Chr$(10)
			sDatasetBounds = sDatasetBounds + Chr$(9) + Chr$(9) + "var southWest = L.latLng(" + fY1ds + ", " + fX1ds + ")," + Chr$(10)
			sDatasetBounds = sDatasetBounds + Chr$(9) + Chr$(9) + Chr$(9) + "northEast = L.latLng(" + fY2ds + ", " + fX2ds + ")," + Chr$(10)
			sDatasetBounds = sDatasetBounds + Chr$(9) + Chr$(9) + Chr$(9) + "bounds = L.latLngBounds(southWest, northEast);"

		End If
	Else
		sTable2Export = ""
		Alter Control ExpDlgBtnLaySetID Disable
		Alter Control ExpDlgSTStep2ID Disable
		Alter Control ExpDlgOKBtnID Disable
		sGeoJSONFilePathTmp = ""
		sGeoJSONFilePath = ""
		sHTMLFilePathTmp = ""
		sHTMLFilePath = ""
		Alter Control ExpDlgETHTMLFilePathID Value sHTMLFilePath Disable
		sTitleWebsite = ""
		Alter Control ExpDlgETTitleWebPageID Value sTitleWebsite Disable
		Alter Control ExpDlgBtnPointStyleSetID Hide
		Alter Control ExpDlgBtnSetColorID Hide
		Alter Control ExpDlgSTTitleWebPageID Disable
		Alter Control ExpDlgSTHTMLFileID Disable
		Alter Control ExpDlgBtnSetHTMLFilePathID Disable
		sLayerNamePub =  ""
		sFeatureCollection = ""
		ReDim sColumnsListPopup(0)
		Alter Control ExpDlgSTStep2ID Disable
		Alter Control ExpDlgSTStep3ID Disable
		Alter Control ExpDlgSTStep4ID Disable
		Alter Control ExpDlgSTStep5ID Disable
		Alter Control ExpDlgSTStep6ID Disable
		Alter Control ExpDlgOKBtnID Disable
	End If

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub EnableLayerSelection

'************************************************************************************
Sub ExpDlgOKBtnHandler
'************************************************************************************

OnError Goto HandleError

Dim sHTMLFile As String

		sHTMLFilePath = ReadControlValue(ExpDlgETHTMLFilePathID)
		sHTMLFilePathTmp = Left$(sHTMLFilePath, Len(sHTMLFilePath) - 5) + "_tmp.html"
		sExportFolder = PathToDirectory$(sHTMLFilePath)
		sHTMLFile = PathToFileName$(sHTMLFilePath)
		sGeoJSONFilePath = sExportFolder + "js\" + Left$(sHTMLFile, Len(sHTMLFile) - 5) + ".js"
		sGeoJSONFilePathTmp = sExportFolder + "js\" + Left$(sHTMLFile, Len(sHTMLFile) - 5) + "_tmp.js"
		sTitleWebsite = ReadControlValue(ExpDlgETTitleWebPageID)

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub ExpDlgOKBtnHandler

'************************************************************************************
Sub LayerSettingsDialog
'************************************************************************************

OnError Goto HandleError

Dim sMapWindow As String
Dim i, iMapWindowID As Integer

	ReDim sColumnsListNonPopup(0)
	
	For i = 1 to NumWindows()
		iMapWindowID = WindowID(i)
		'Check for thematic layer (ranges or values) in front window
		'sMapWindow becomes a string of MapBasic statements that can be used in a Run Command statement to duplicate a window
		sMapWindow = WindowInfo(iMapWindowID, WIN_INFO_CLONEWINDOW)
		iTheme = ExtractThematicValues(sMapWindow, iMapWindowID, sThemeLayer, sThemeCol, sValuesArray, sColorValsArray, sMaxValue, sDefaultColor)
		If iTheme > 0 And sThemeLayer = sTable2Export Then
			lExportTheme = AskAgain("Do you want to export the thematic layer on " + sThemeLayer + "?", AppName)
			If Not lExportTheme Then
				sThemeLayer = ""
				sThemeCol = ""
				ReDim sValuesArray(0)
				ReDim sColorValsArray(0)
				sMaxValue = ""
				sDefaultColor = ""
			End If
			Exit For
		End If
	Next
	
	Dialog
		Title "Layer Settings"
		Calling CheckForHyperlinks
		Control StaticText Title "Layer&Group Name*:" Position 2dW, 1dH
		Control EditText Value sLayerNamePub Position 19dW, 1dH Width 35dW ID LSDlgETLNameID
		Control StaticText Title "*As visible in the Leaflet Layers Control" Position 2dW, 2.5dH
		Control StaticText Title "Columns Not to be Added to Pop&up:" Position 2dW, 4.5dH
		Control ListBox Position 2dW, 6.5dH Width 36dW Height 17dH ID LSDlgLBLayersNotAddedID Calling NonAddedColumnsHandler
		Control CheckBox Title "Add Column &Names" Value lAddColumnNames Position 56.5dW, 1.5dH ID LSDlgCBAddColNmID Calling AddColNamesHandler
		Control CheckBox Title "First Column &Bold" Value lFirstColumnBold Position 56.5dW, 3dH ID LSDlgCBCol1BoldID
		Control StaticText Title "Columns to be Added to &Popup:" Position 56.5dW, 4.5dH
		Control ListBox Title From Variable sColumnsListPopup Position 56.5dW, 6.5dH Width 36dW Height 17dH ID LSDlgLBLayersAddedID Calling AddedColumnsHandler
		Control Button Title "&Add >" Position 38.75dW, 6.5dH Width 16.5dW Height 3dH Disable ID LSDlgBtnAddID Calling ModifyColumnsListPopupAdd
		Control Button Title "A&dd All >>" Position 38.75dW, 10dH Width 16.5dW Height 3dH Disable ID LSDlgBtnAddAllID Calling ModifyColumnsListPopupAddAll
		Control Button Title "< &Remove" Position 38.75dW, 17dH Width 16.5dW Height 3dH Disable ID LSDlgBtnRemID Calling ModifyColumnsListPopupRemove
		Control Button Title "<< R&emove All" Position 38.75dW, 20.5dH Width 16.5dW Height 3dH ID LSDlgBtnRemAllID Calling ModifyColumnsListPopupRemoveAll
		Control GroupBox Title "Hyperlink:" Position 2dW, 24.5dH Width 58dW Height 9dH Disable ID LSDlgGBHLnkID
		Control StaticText Title "Column:" Position 3dW, 26dH Disable ID LSDlgSTHLColID
		Control EditText Position 10.5dW, 26dH Width 31.5dW Disable ID LSDlgETHLColID
		Control StaticText Title "A&lias:" Position 3dW, 28dH Disable ID LSDlgSTAliasID
		Control PopupMenu Position 10.5dW, 28dH Width 31.5dW Disable ID LSDlgPUMAliasID
		Control RadioGroup Position 10.5dW, 30dH Title "&Same Window;New &Window or Tab" Value iTarget Disable ID LSDlgRGTargetID
		Control Button Title "Re&move Hyperlink" Position 42.5dW, 26dH Width 16.5dW Height 3.5dH Disable ID LSDlgBtnRemHLID Calling RemoveHyperLink

		Control CheckBox Title "&Zoom in to marker/feature on click" Value lZoomInOnClick Position 61dW, 26dH ID LSDlgCBZmClckID

		Control StaticText Title "&Tooltip:" Position 3dW, 34.5dH ID LSDlgSTTTipID
		Control PopupMenu Title From Variable sColumnsList Value 2 Position 10.5dW, 34.5dH Width 31.5dW ID LSDlgPUMTTipID

		Control OKButton Title "&OK" ID LSDlgOKBtnID Calling LSDlgOKBtnHandler
		Control CancelButton Title "&Cancel"
		Control Button Title "&Help" Calling AddIn_Help

		If CommandInfo(CMD_INFO_DLG_OK) Then
			Alter Control ExpDlgETHTMLFilePathID Enable
			Alter Control ExpDlgETTitleWebPageID Enable
			Alter Control ExpDlgSTTitleWebPageID Enable
			Alter Control ExpDlgSTHTMLFileID Enable
			Alter Control ExpDlgBtnSetHTMLFilePathID Enable
			If IsPointLineOrPolygonTable(sTable2Export) = 1 Then
				Alter Control ExpDlgBtnPointStyleSetID Show
				Alter Control ExpDlgSTStep5ID Enable Title "Set Point Style Settings"
			ElseIf IsPointLineOrPolygonTable(sTable2Export) In (2,3) Then
				If lExportTheme Then
					Alter Control ExpDlgSTStep5ID Enable Title "Thematic colors will be used."
				Else
					Alter Control ExpDlgBtnSetColorID Show
					Alter Control ExpDlgSTStep5ID Enable Title "Set Color"
				End If
			End If
			Alter Control ExpDlgSTStep3ID Enable
			Alter Control ExpDlgSTStep4ID Enable
			Alter Control ExpDlgSTStep6ID Enable
			Alter Control ExpDlgOKBtnID Enable
		End If

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub LayerSettingsDialog

'************************************************************************************
Sub ColorSettingsDialog
'************************************************************************************

OnError Goto HandleError

	Dialog
		Title "Set Color for LineStrings and Polygons"
		Control Button Title "&Pick Color" Position 3dW, 1dH Calling ColorPicker
		Control StaticText Title "Current Color: " + sObjectColor Position 16dW, 1.25dH ID PSDlgSTHexColID
		
		Control OKButton Title "&OK"
		Control CancelButton Title "&Cancel"
		Control Button Title "&Help" Calling AddIn_Help

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub ColorSettingsDialog

'************************************************************************************
Sub PointStyleSettingsDialog
'************************************************************************************

OnError Goto HandleError

Dim sPointSizeArray(21) As String
Dim i, iPointSizeFromArrary As Integer


For i = 5 to 25
	sPointSizeArray(i-4) = i
Next

iPointSizeFromArrary = iPointSize - 4

	Dialog
		Title "Point Style Settings"
		Calling SetPointStyleSettingsDlg
		Control RadioGroup Title "Use &Icon from File*; Use &divIcon" Value iPointStyleSetting Into iPointStyleSetting Position 2dW, 1dH ID PSDlgRGPointStyleID Calling PointStyleSettingChangeHandler
		Control StaticText Title "*Default blue-arrow.png will be used." Position 2dW, 5dH ID PSDlgSTExpl1ID
		Control StaticText Title "Manually edit output html to use your own icon from file." Position 2dW, 6dH ID PSDlgSTExpl2ID
		Control GroupBox Title "divIcon" Position 2dW, 8dH Width 48dW Height 10dH ID PSDlgGBdivIconID
		Control StaticText Title "Shape:" Position 3dW, 9.5dH ID PSDlgSTShapeID
		Control RadioGroup Title "Ci&rcle; &Square" Value iPointShape Into iPointShape Position 3dW, 11dH ID PSDlgRGShapeID
		Control StaticText Title "Size (pixels):" Position 17dW, 9.5dH ID PSDlgSTSizeID
		Control PopUpMenu Title From Variable sPointSizeArray Value iPointSizeFromArrary Into iPointSizeFromArrary Position 17dW, 11dH ID PSDlgPUMSizeID
		Control Button Title "&Pick Color" Position 3dW, 15.5dH ID PSDlgBTnPickColorID Calling ColorPicker
		Control StaticText Title "Thematic colors will be used." Position 16dW, 15.75dH ID PSDlgSTHexColID
		
		Control OKButton Title "&OK"
		Control CancelButton Title "&Cancel"
		Control Button Title "&Help" Calling AddIn_Help

		If CommandInfo(CMD_INFO_DLG_OK) Then
			iPointSize = iPointSizeFromArrary + 4
		End If

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub PointStyleSettingsDialog

'************************************************************************************
Sub SetPointStyleSettingsDlg
'************************************************************************************

OnError Goto HandleError

	If lExportTheme Then
		iPointStyleSetting = 2
		Alter Control PSDlgRGPointStyleID Disable Value iPointStyleSetting
	End If

	If iPointStyleSetting = 1 Then
		Alter Control PSDlgSTExpl1ID Title "*Default blue-arrow.png will be used."
		Alter Control PSDlgSTExpl2ID Title "Manually edit output html to use your own icon from file."
		Alter Control PSDlgGBdivIconID Disable
		Alter Control PSDlgSTShapeID Disable
		Alter Control PSDlgRGShapeID Disable
		Alter Control PSDlgSTSizeID Disable
		Alter Control PSDlgPUMSizeID Disable
		Alter Control PSDlgBTnPickColorID Disable
		Alter Control PSDlgSTHexColID Title ""
	ElseIf iPointStyleSetting = 2 Then
		Alter Control PSDlgSTExpl1ID Title ""
		Alter Control PSDlgSTExpl2ID Title ""
		Alter Control PSDlgGBdivIconID Enable
		Alter Control PSDlgSTShapeID Enable
		Alter Control PSDlgRGShapeID Enable
		Alter Control PSDlgSTSizeID Enable
		Alter Control PSDlgPUMSizeID Enable
		If Not lExportTheme Then
			Alter Control PSDlgBTnPickColorID Enable
			Alter Control PSDlgSTHexColID Title "Current Color: " + sObjectColor
		Else
			Alter Control PSDlgBTnPickColorID Disable
			Alter Control PSDlgSTHexColID Title "Thematic colors will be used."
		End If
	End If
	

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub SetPointStyleSettingsDlg

'************************************************************************************
Sub PointStyleSettingChangeHandler
'************************************************************************************

OnError Goto HandleError

	iPointStyleSetting = ReadControlValue(PSDlgRGPointStyleID)
	Call SetPointStyleSettingsDlg

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub PointStyleSettingChangeHandler

'************************************************************************************
Sub ColorPicker
'************************************************************************************

OnError Goto HandleError

Dim iColor As Integer

	iColor =  colDlg(iMIColor)

	If iColor >= 0 Then
		iMIColor = iColor
	End If

	sObjectColor = hexCol(iMIColor)
	
	Alter Control PSDlgSTHexColID Title "Current Color: " + sObjectColor

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub ColorPicker

'************************************************************************************
Sub LSDlgOKBtnHandler
'************************************************************************************

OnError Goto HandleError

Dim i, j As Integer
Dim lAliasInList, lThemeColInList As Logical
Dim sAliasValue As String

	lAddColumnNames = ReadControlValue(LSDlgCBAddColNmID)
	lFirstColumnBold = ReadControlValue(LSDlgCBCol1BoldID)
	lZoomInOnClick = ReadControlValue(LSDlgCBZmClckID)
	iTarget = ReadControlValue(LSDlgRGTargetID)
	sLayerNamePub = ReadControlValue(LSDlgETLNameID)  'Visible for the user in the Leaflet Layers Control
	sFeatureCollection = ReplaceSubStringWith(LCase$(sLayerNamePub), Chr$(32), Chr$(95)) 'Used as the GeoJSON var name
	If ReadControlValue(LSDlgPUMTTipID) > 1 Then
		sTooltipCol = sColumnsList(ReadControlValue(LSDlgPUMTTipID))
	Else
		sTooltipCol = sColumnsList(2)
	End If

	ReDim Columns2Export(UBound(sColumnsListPopup))

	For i = 1 to UBound(sColumnsListPopup)
		Columns2Export(i).sColName = sColumnsListPopup(i)
		Columns2Export(i).lInToolTip = TRUE
		If sColumnsListPopup(i) = sHyperlink Then
			Columns2Export(i).lHyperlink = TRUE
			If ReadControlValue(LSDlgPUMAliasID) > 1 Then
				Columns2Export(i).sAlias = sColumnsList(ReadControlValue(LSDlgPUMAliasID))
			Else
				Columns2Export(i).sAlias = sHyperlink
			End If
		Else
			Columns2Export(i).lHyperlink = FALSE
			Columns2Export(i).sAlias = ""
		End If
	Next
	
	If sHyperlink <> "" Then
		For j = 1 to Ubound(Columns2Export)
			If Columns2Export(j).sColName = sColumnsList(ReadControlValue(LSDlgPUMAliasID)) Then
				lAliasInList = TRUE
				Exit For
			Else
				lAliasInList = FALSE
			End If
		Next
		If Not lAliasInList Then
			j = Ubound(Columns2Export) + 1
			Redim Columns2Export(j)
			Columns2Export(i).sColName = sColumnsList(ReadControlValue(LSDlgPUMAliasID))
			Columns2Export(i).lInToolTip = FALSE
		End If
	End If

	If lExportTheme Then
		For j = 1 to Ubound(Columns2Export)
			If Columns2Export(j).sColName = sThemeCol Then
				lThemeColInList = TRUE
				Exit For
			Else
				lThemeColInList = FALSE
			End If
		Next
		If Not lThemeColInList Then
			j = Ubound(Columns2Export) + 1
			Redim Columns2Export(j)
			Columns2Export(i).sColName = sThemeCol
			Columns2Export(i).lInToolTip = FALSE
		End If
	End If

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub LSDlgOKBtnHandler

'*********************************************************************************************
Sub NonAddedColumnsHandler
'*********************************************************************************************

OnError GoTo HandleError

	If CommandInfo(CMD_INFO_DLG_DBL) Then
		Call ModifyColumnsListPopupAdd
		Alter Control LSDlgBtnAddID Disable
	Else
		Alter Control LSDlgBtnAddID Enable
	End If

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub NonAddedColumnsHandler

'*********************************************************************************************
Sub AddedColumnsHandler
'*********************************************************************************************

OnError GoTo HandleError

	If CommandInfo(CMD_INFO_DLG_DBL) Then
		Call ModifyColumnsListPopupRemove
		Alter Control LSDlgBtnRemID Disable
	Else
		Alter Control LSDlgBtnRemID Enable
	End If

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub AddedColumnsHandler

'*********************************************************************************************
Sub ModifyColumnsListPopupAdd
'*********************************************************************************************

OnError GoTo HandleError

	Call ModifyColumnsListPopup(1)

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopupAdd

'*********************************************************************************************
Sub ModifyColumnsListPopupAddAll
'*********************************************************************************************

OnError GoTo HandleError

	Call ModifyColumnsListPopup(2)

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopupAddAll

'*********************************************************************************************
Sub ModifyColumnsListPopupRemove
'*********************************************************************************************

OnError GoTo HandleError

	Call ModifyColumnsListPopup(3)

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopupRemove

'*********************************************************************************************
Sub ModifyColumnsListPopupRemoveAll
'*********************************************************************************************

OnError GoTo HandleError

	Call ModifyColumnsListPopup(4)

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopupRemoveAll

'*********************************************************************************************
Sub ModifyColumnsListPopup(ByVal iOperation As Integer)
'*********************************************************************************************

OnError GoTo HandleError

Dim i, j, k As Integer
Dim sTempArray() As String

	Do Case iOperation
		Case 1 'Add
			i = UBound(sColumnsListPopup) + 1
			Redim sColumnsListPopup(i)
			sColumnsListPopup(i) = sColumnsListNonPopup(ReadControlValue(LSDlgLBLayersNotAddedID))

			For i = 1 to UBound(sColumnsListNonPopup)
				If sColumnsListNonPopup(i) <>  sColumnsListNonPopup(ReadControlValue(LSDlgLBLayersNotAddedID)) Then
					j = UBound(sTempArray) + 1								
					ReDim sTempArray(j)
					sTempArray(j) = sColumnsListNonPopup(i)
				End If
			Next
			ReDim sColumnsListNonPopup(UBound(sTempArray))
			For i = 1 to UBound(sTempArray)
				sColumnsListNonPopup(i) = sTempArray(i)			
			Next
			ReDim sTempArray(0)

			Alter Control LSDlgLBLayersNotAddedID Title From Variable sColumnsListNonPopup
			Alter Control LSDlgLBLayersAddedID Title From Variable sColumnsListPopup
			Alter Control LSDlgBtnAddID Disable
			Alter Control LSDlgBtnAddAllID Disable
			Alter Control LSDlgBtnRemID Disable
			If UBound(sColumnsListNonPopup) = 0 Then
				Alter Control LSDlgBtnRemAllID Enable
			Else
				Alter Control LSDlgBtnRemAllID Disable
			End If
			
		Case 2 'Add All
			ReDim sColumnsListPopup(UBound(sColumnsListNonPopup))
			For i = 1 to UBound(sColumnsListNonPopup)
				sColumnsListPopup(i) = sColumnsListNonPopup(i)			
			Next
			ReDim sColumnsListNonPopup(0)
			Alter Control LSDlgLBLayersNotAddedID Title From Variable sColumnsListNonPopup
			Alter Control LSDlgLBLayersAddedID Title From Variable sColumnsListPopup
			Alter Control LSDlgBtnAddID Disable
			Alter Control LSDlgBtnAddAllID Disable
			Alter Control LSDlgBtnRemID Disable
			Alter Control LSDlgBtnRemAllID Enable
		Case 3 'Remove
			i = UBound(sColumnsListNonPopup) + 1
			Redim sColumnsListNonPopup(i)
			sColumnsListNonPopup(i) = sColumnsListPopup(ReadControlValue(LSDlgLBLayersAddedID))

			For i = 1 to UBound(sColumnsListPopup)
				If sColumnsListPopup(i) <>  sColumnsListPopup(ReadControlValue(LSDlgLBLayersAddedID)) Then
					j = UBound(sTempArray) + 1								
					ReDim sTempArray(j)
					sTempArray(j) = sColumnsListPopup(i)
				End If
			Next
			ReDim sColumnsListPopup(UBound(sTempArray))
			For i = 1 to UBound(sTempArray)
				sColumnsListPopup(i) = sTempArray(i)			
			Next
			ReDim sTempArray(0)

			Alter Control LSDlgLBLayersNotAddedID Title From Variable sColumnsListNonPopup
			Alter Control LSDlgLBLayersAddedID Title From Variable sColumnsListPopup
			Alter Control LSDlgBtnAddID Disable
			If UBound(sColumnsListPopup) = 0 Then
				Alter Control LSDlgBtnAddAllID Enable
			Else
				Alter Control LSDlgBtnAddAllID Disable
			End If
			Alter Control LSDlgBtnRemID Disable
			Alter Control LSDlgBtnRemAllID Disable
		
		Case 4 'Remove All
			ReDim sColumnsListNonPopup(UBound(sColumnsListPopup))
			For i = 1 to UBound(sColumnsListPopup)
				sColumnsListNonPopup(i) = sColumnsListPopup(i)			
			Next
			ReDim sColumnsListPopup(0)
			Alter Control LSDlgLBLayersNotAddedID Title From Variable sColumnsListNonPopup
			Alter Control LSDlgLBLayersAddedID Title From Variable sColumnsListPopup
			Alter Control LSDlgBtnAddID Disable
			Alter Control LSDlgBtnAddAllID Enable
			Alter Control LSDlgBtnRemID Disable
			Alter Control LSDlgBtnRemAllID Disable
	End Case

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ModifyColumnsListPopup

'************************************************************************************
Sub AddColNamesHandler
'************************************************************************************

OnError Goto HandleError

	If ReadControlValue(LSDlgCBAddColNmID) Then
		Alter Control LSDlgCBCol1BoldID Value FALSE Disable
	Else
		Alter Control LSDlgCBCol1BoldID Enable
	End If

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub AddColNamesHandler

'************************************************************************************
Sub CheckForHyperlinks
'************************************************************************************

OnError Goto HandleError

Dim sQuery As String
Dim i, j, k As Integer

	For i = 2 to UBound(sColumnsList)
		k = 0
		sQuery = "Select " + sColumnsList(i) + " From " + sTable2Export + " Group By 1 Into TestTable"
		Run Command sQuery
	
		For j = 1 To TableInfo(TestTable, TAB_INFO_NROWS)
			Fetch Rec j From TestTable
			If LooksLikeURL(TestTable.Col1) Then
				k = k + 1
			End If
		Next
	
		If k > 0 Then
			sHyperlink = sColumnsList(i)
			Alter Control LSDlgGBHLnkID Enable
			Alter Control LSDlgSTHLColID Enable
			Alter Control LSDlgETHLColID Disable Value sHyperlink
			Alter Control LSDlgSTAliasID Enable
			Alter Control LSDlgPUMAliasID Enable Title From Variable sColumnsList Value i
			Alter Control LSDlgRGTargetID Enable Value iTarget
			Alter Control LSDlgBtnRemHLID Enable
			Exit For
		End If
	Next

	Close Table TestTable

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub CheckForHyperlinks

'************************************************************************************
Sub RemoveHyperLink
'************************************************************************************

OnError Goto HandleError

		sHyperlink = ""
		Alter Control LSDlgGBHLnkID Disable
		Alter Control LSDlgSTHLColID Disable
		Alter Control LSDlgETHLColID Disable Value sHyperlink
		Alter Control LSDlgSTAliasID Disable
		Alter Control LSDlgPUMAliasID Disable Title ""
		Alter Control LSDlgRGTargetID Disable
		Alter Control LSDlgBtnRemHLID Disable

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub RemoveHyperLink

'************************************************************************************
Sub SetHTMLFilePath 
'************************************************************************************

OnError Goto HandleError

Dim sNewHTMLFilePath As String

	'Here the user is given the possibility to choose a folder and name for the html file
	sNewHTMLFilePath = FileSaveAsDlg(PathToDirectory$(sHTMLFilePath), PathToFileName$(sHTMLFilePath), "*.*", "Choose a folder and a name for the html file")
	
	If sNewHTMLFilePath <> "" Then
		sHTMLFilePath = sNewHTMLFilePath
		sExportFolder = PathToDirectory$(sHTMLFilePath)
		Alter Control ExpDlgETHTMLFilePathID Value sHTMLFilePath
	End If

Exit Sub
'---------------------------
HandleError:
	Note Error$()

End Sub SetHTMLFilePath

'*********************************************************************************************
Sub GetVectorTables
'*********************************************************************************************

OnError GoTo HandleError

	Dim i, j as Integer

	j = 1
	ReDim sTableList(j)
	
	sTableList(1) = "<-- Please select a table -->"
	
	For i = 1 to NumTables()

		If IsPointLineOrPolygonTable(TableInfo(i, TAB_INFO_NAME)) > 0 Then
			If NoOfColumns(TableInfo(i, TAB_INFO_NAME), sColumnsList) > 0 Then
				j = j + 1
				ReDim sTableList(j)
				sTableList(j) = TableInfo(i, TAB_INFO_NAME)
			End If
		End If
	Next

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub GetVectorTables

'**************************************************************
Sub ProcessRegion(ByVal oRegion As Object, sGeoJSONGeomObjType As String, sCoordinates As String)
'**************************************************************

OnError GoTo HandleError

Dim	iNumPol, iNumNodes, i, j As Integer,
	oSubObjArray(), oCur, oEmptyObj As Object,
	sSubCoordinatesArray(), sSubCoordinates, sFinalString As String

	sGeoJSONGeomObjType = ""
	sCoordinates = ""
	
	If not ObjectInfo(oRegion, OBJ_INFO_TYPE) = OBJ_TYPE_REGION Then
		Exit Sub
	End If

	iNumPol = ObjectInfo(oRegion,OBJ_INFO_NPOLYGONS)

	Redim oSubObjArray(iNumPol)
	Redim sSubCoordinatesArray(iNumPol)
	
	For i = 1 To iNumPol
		sSubCoordinates = ""
		iNumNodes = ObjectInfo(oRegion,OBJ_INFO_NPOLYGONS+i)

		Create Region
			Into Variable oCur
			1 1 (CentroidX(oRegion),CentroidY(oRegion))  'one dummy point (to fool centroid function)
		For j = 1 To iNumNodes
			Alter Object oCur
				Node Add Position 1, j+1 (ObjectNodeX(oRegion,i,j),ObjectNodeY(oRegion,i,j))

			If j = 1 Then
				sSubCoordinates = "[ "
			End If

			sSubCoordinates = sSubCoordinates + " [" + ObjectNodeX(oRegion,i,j) + ", " + ObjectNodeY(oRegion,i,j) + "]"

			If j < iNumNodes Then
				sSubCoordinates = sSubCoordinates + ","
			Else
				sSubCoordinates = sSubCoordinates + " ]"
			End If

		Next
		Alter Object oCur Node Remove Position 1,1  'delete dummy centroid to force MI to recalc it

		oSubObjArray(i) = oCur
		sSubCoordinatesArray(i) = sSubCoordinates
		
	Next

	For i = 1 To Ubound(oSubObjArray)
		oCur = oSubObjArray(i)
		For j = 1 To Ubound(oSubObjArray)
			If i <> j Then
				If oCur Contains Entire oSubObjArray(j) Then 'hole
					sSubCoordinatesArray(i) = sSubCoordinatesArray(i) + ", " + sSubCoordinatesArray(j)
					sSubCoordinatesArray(j) = ""
					Create Region Into Variable oEmptyObj 0
					oSubObjArray(j) = oEmptyObj
					oCur = Erase(oCur, oSubObjArray(j))
					oSubObjArray(i) = oCur
				End if
			End If
		Next	'j
	Next	'i
	j = 0
	For i = 1 to UBound(sSubCoordinatesArray)
		If sSubCoordinatesArray(i) <> "" Then
			j = j + 1
		End If
	Next
	If j = 1 Then
		For i = 1 to UBound(sSubCoordinatesArray)
			sFinalString = sFinalString + sSubCoordinatesArray(i)
		Next
		sGeoJSONGeomObjType = "Polygon"
	Else
		For i = 1 to UBound(sSubCoordinatesArray)
			If sSubCoordinatesArray(i) <> "" Then
				sFinalString = sFinalString + "[" + sSubCoordinatesArray(i) + "]"
				If i < UBound(sSubCoordinatesArray) Then
					sFinalString = sFinalString + ", "
				End If
			End If
		Next
		sGeoJSONGeomObjType = "MultiPolygon"
		
	End If
	sCoordinates = sFinalString

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ProcessRegion

'**************************************************************
Sub ProcessPline(ByVal oPline As Object, sGeoJSONGeomObjType As String, sCoordinates As String)
'**************************************************************

OnError GoTo HandleError

Dim	iNumSec, iNumNodes, i, j As Integer,
	sSubCoordinatesArray(), sSubCoordinates, sFinalString As String

	sGeoJSONGeomObjType = ""
	sCoordinates = ""
	
	If not ObjectInfo(oPline, OBJ_INFO_TYPE) = OBJ_TYPE_PLINE Then
		Exit Sub
	End If

	iNumSec = ObjectInfo(oPline,OBJ_INFO_NPOLYGONS) 'number of sections

	Redim sSubCoordinatesArray(iNumSec)
	
	For i = 1 To iNumSec
		sSubCoordinates = ""
		iNumNodes = ObjectInfo(oPline,OBJ_INFO_NPOLYGONS+i)

		For j = 1 To iNumNodes

			sSubCoordinates = sSubCoordinates + " [" + ObjectNodeX(oPline,i,j) + ", " + ObjectNodeY(oPline,i,j) + "]"

			If j < iNumNodes Then
				sSubCoordinates = sSubCoordinates + ","
			End If

		Next

		sSubCoordinatesArray(i) = sSubCoordinates
		
	Next

	If UBound(sSubCoordinatesArray) = 1 Then
		sFinalString = sSubCoordinatesArray(1)
		sGeoJSONGeomObjType = "LineString"
	Else
		For i = 1 to UBound(sSubCoordinatesArray)
			sFinalString = sFinalString + "[" + sSubCoordinatesArray(i) + "]"
			If i < UBound(sSubCoordinatesArray) Then
				sFinalString = sFinalString + ", "
			End If
		Next
		sGeoJSONGeomObjType = "MultiLineString"
	End If
	sCoordinates = sFinalString

Exit Sub
'---------------------------
HandleError:
    Note Error$()

End Sub ProcessPline
